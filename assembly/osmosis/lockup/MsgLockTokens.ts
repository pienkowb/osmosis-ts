// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Duration } from "../../google/protobuf/Duration";
import { Coin } from "../../cosmos/base/v1beta1/Coin";

export class MsgLockTokens {
  static encode(message: MsgLockTokens, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.owner);

    const duration = message.duration;
    if (duration !== null) {
      writer.uint32(18);
      writer.fork();
      Duration.encode(duration, writer);
      writer.ldelim();
    }

    const coins = message.coins;
    for (let i: i32 = 0; i < coins.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Coin.encode(coins[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgLockTokens {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLockTokens();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.duration = Duration.decode(reader, reader.uint32());
          break;

        case 3:
          message.coins.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  owner: string;
  duration: Duration | null;
  coins: Array<Coin>;

  constructor(
    owner: string = "",
    duration: Duration | null = null,
    coins: Array<Coin> = []
  ) {
    this.owner = owner;
    this.duration = duration;
    this.coins = coins;
  }
}

export function encodeMsgLockTokens(message: MsgLockTokens): Uint8Array {
  return Protobuf.encode(message, MsgLockTokens.encode);
}

export function decodeMsgLockTokens(buffer: Uint8Array): MsgLockTokens {
  return Protobuf.decode<MsgLockTokens>(buffer, MsgLockTokens.decode);
}
