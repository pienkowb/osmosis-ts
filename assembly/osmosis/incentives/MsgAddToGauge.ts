// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Coin } from "../../cosmos/base/v1beta1/Coin";

export class MsgAddToGauge {
  static encode(message: MsgAddToGauge, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.owner);

    writer.uint32(16);
    writer.uint64(message.gaugeId);

    const rewards = message.rewards;
    for (let i: i32 = 0; i < rewards.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Coin.encode(rewards[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgAddToGauge {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgAddToGauge();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.owner = reader.string();
          break;

        case 2:
          message.gaugeId = reader.uint64();
          break;

        case 3:
          message.rewards.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  owner: string;
  gaugeId: u64;
  rewards: Array<Coin>;

  constructor(owner: string = "", gaugeId: u64 = 0, rewards: Array<Coin> = []) {
    this.owner = owner;
    this.gaugeId = gaugeId;
    this.rewards = rewards;
  }
}

export function encodeMsgAddToGauge(message: MsgAddToGauge): Uint8Array {
  return Protobuf.encode(message, MsgAddToGauge.encode);
}

export function decodeMsgAddToGauge(buffer: Uint8Array): MsgAddToGauge {
  return Protobuf.decode<MsgAddToGauge>(buffer, MsgAddToGauge.decode);
}
