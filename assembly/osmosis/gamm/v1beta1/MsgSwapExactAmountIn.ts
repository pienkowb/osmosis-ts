// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { SwapAmountInRoute } from "./SwapAmountInRoute";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class MsgSwapExactAmountIn {
  static encode(message: MsgSwapExactAmountIn, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    const routes = message.routes;
    for (let i: i32 = 0; i < routes.length; ++i) {
      writer.uint32(18);
      writer.fork();
      SwapAmountInRoute.encode(routes[i], writer);
      writer.ldelim();
    }

    const tokenIn = message.tokenIn;
    if (tokenIn !== null) {
      writer.uint32(26);
      writer.fork();
      Coin.encode(tokenIn, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.tokenOutMinAmount);
  }

  static decode(reader: Reader, length: i32): MsgSwapExactAmountIn {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSwapExactAmountIn();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.routes.push(
            SwapAmountInRoute.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.tokenIn = Coin.decode(reader, reader.uint32());
          break;

        case 4:
          message.tokenOutMinAmount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  routes: Array<SwapAmountInRoute>;
  tokenIn: Coin | null;
  tokenOutMinAmount: string;

  constructor(
    sender: string = "",
    routes: Array<SwapAmountInRoute> = [],
    tokenIn: Coin | null = null,
    tokenOutMinAmount: string = ""
  ) {
    this.sender = sender;
    this.routes = routes;
    this.tokenIn = tokenIn;
    this.tokenOutMinAmount = tokenOutMinAmount;
  }
}

export function encodeMsgSwapExactAmountIn(
  message: MsgSwapExactAmountIn
): Uint8Array {
  return Protobuf.encode(message, MsgSwapExactAmountIn.encode);
}

export function decodeMsgSwapExactAmountIn(
  buffer: Uint8Array
): MsgSwapExactAmountIn {
  return Protobuf.decode<MsgSwapExactAmountIn>(
    buffer,
    MsgSwapExactAmountIn.decode
  );
}
