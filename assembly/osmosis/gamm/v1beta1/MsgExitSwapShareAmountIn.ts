// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class MsgExitSwapShareAmountIn {
  static encode(message: MsgExitSwapShareAmountIn, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(16);
    writer.uint64(message.poolId);

    writer.uint32(26);
    writer.string(message.tokenOutDenom);

    writer.uint32(34);
    writer.string(message.shareInAmount);

    writer.uint32(42);
    writer.string(message.tokenOutMinAmount);
  }

  static decode(reader: Reader, length: i32): MsgExitSwapShareAmountIn {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgExitSwapShareAmountIn();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.poolId = reader.uint64();
          break;

        case 3:
          message.tokenOutDenom = reader.string();
          break;

        case 4:
          message.shareInAmount = reader.string();
          break;

        case 5:
          message.tokenOutMinAmount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  poolId: u64;
  tokenOutDenom: string;
  shareInAmount: string;
  tokenOutMinAmount: string;

  constructor(
    sender: string = "",
    poolId: u64 = 0,
    tokenOutDenom: string = "",
    shareInAmount: string = "",
    tokenOutMinAmount: string = ""
  ) {
    this.sender = sender;
    this.poolId = poolId;
    this.tokenOutDenom = tokenOutDenom;
    this.shareInAmount = shareInAmount;
    this.tokenOutMinAmount = tokenOutMinAmount;
  }
}

export function encodeMsgExitSwapShareAmountIn(
  message: MsgExitSwapShareAmountIn
): Uint8Array {
  return Protobuf.encode(message, MsgExitSwapShareAmountIn.encode);
}

export function decodeMsgExitSwapShareAmountIn(
  buffer: Uint8Array
): MsgExitSwapShareAmountIn {
  return Protobuf.decode<MsgExitSwapShareAmountIn>(
    buffer,
    MsgExitSwapShareAmountIn.decode
  );
}
