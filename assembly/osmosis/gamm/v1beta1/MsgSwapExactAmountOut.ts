// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { SwapAmountOutRoute } from "./SwapAmountOutRoute";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class MsgSwapExactAmountOut {
  static encode(message: MsgSwapExactAmountOut, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    const routes = message.routes;
    for (let i: i32 = 0; i < routes.length; ++i) {
      writer.uint32(18);
      writer.fork();
      SwapAmountOutRoute.encode(routes[i], writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.tokenInMaxAmount);

    const tokenOut = message.tokenOut;
    if (tokenOut !== null) {
      writer.uint32(34);
      writer.fork();
      Coin.encode(tokenOut, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgSwapExactAmountOut {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgSwapExactAmountOut();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.routes.push(
            SwapAmountOutRoute.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.tokenInMaxAmount = reader.string();
          break;

        case 4:
          message.tokenOut = Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  routes: Array<SwapAmountOutRoute>;
  tokenInMaxAmount: string;
  tokenOut: Coin | null;

  constructor(
    sender: string = "",
    routes: Array<SwapAmountOutRoute> = [],
    tokenInMaxAmount: string = "",
    tokenOut: Coin | null = null
  ) {
    this.sender = sender;
    this.routes = routes;
    this.tokenInMaxAmount = tokenInMaxAmount;
    this.tokenOut = tokenOut;
  }
}

export function encodeMsgSwapExactAmountOut(
  message: MsgSwapExactAmountOut
): Uint8Array {
  return Protobuf.encode(message, MsgSwapExactAmountOut.encode);
}

export function decodeMsgSwapExactAmountOut(
  buffer: Uint8Array
): MsgSwapExactAmountOut {
  return Protobuf.decode<MsgSwapExactAmountOut>(
    buffer,
    MsgSwapExactAmountOut.decode
  );
}
