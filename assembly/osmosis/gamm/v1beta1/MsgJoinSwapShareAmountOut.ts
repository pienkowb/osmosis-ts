// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class MsgJoinSwapShareAmountOut {
  static encode(message: MsgJoinSwapShareAmountOut, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(16);
    writer.uint64(message.poolId);

    writer.uint32(26);
    writer.string(message.tokenInDenom);

    writer.uint32(34);
    writer.string(message.shareOutAmount);

    writer.uint32(42);
    writer.string(message.tokenInMaxAmount);
  }

  static decode(reader: Reader, length: i32): MsgJoinSwapShareAmountOut {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgJoinSwapShareAmountOut();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.poolId = reader.uint64();
          break;

        case 3:
          message.tokenInDenom = reader.string();
          break;

        case 4:
          message.shareOutAmount = reader.string();
          break;

        case 5:
          message.tokenInMaxAmount = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  poolId: u64;
  tokenInDenom: string;
  shareOutAmount: string;
  tokenInMaxAmount: string;

  constructor(
    sender: string = "",
    poolId: u64 = 0,
    tokenInDenom: string = "",
    shareOutAmount: string = "",
    tokenInMaxAmount: string = ""
  ) {
    this.sender = sender;
    this.poolId = poolId;
    this.tokenInDenom = tokenInDenom;
    this.shareOutAmount = shareOutAmount;
    this.tokenInMaxAmount = tokenInMaxAmount;
  }
}

export function encodeMsgJoinSwapShareAmountOut(
  message: MsgJoinSwapShareAmountOut
): Uint8Array {
  return Protobuf.encode(message, MsgJoinSwapShareAmountOut.encode);
}

export function decodeMsgJoinSwapShareAmountOut(
  buffer: Uint8Array
): MsgJoinSwapShareAmountOut {
  return Protobuf.decode<MsgJoinSwapShareAmountOut>(
    buffer,
    MsgJoinSwapShareAmountOut.decode
  );
}
