// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Coin } from "../../../cosmos/base/v1beta1/Coin";

export class MsgJoinPool {
  static encode(message: MsgJoinPool, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    writer.uint32(16);
    writer.uint64(message.poolId);

    writer.uint32(26);
    writer.string(message.shareOutAmount);

    const tokenInMaxs = message.tokenInMaxs;
    for (let i: i32 = 0; i < tokenInMaxs.length; ++i) {
      writer.uint32(34);
      writer.fork();
      Coin.encode(tokenInMaxs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgJoinPool {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgJoinPool();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.poolId = reader.uint64();
          break;

        case 3:
          message.shareOutAmount = reader.string();
          break;

        case 4:
          message.tokenInMaxs.push(Coin.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  poolId: u64;
  shareOutAmount: string;
  tokenInMaxs: Array<Coin>;

  constructor(
    sender: string = "",
    poolId: u64 = 0,
    shareOutAmount: string = "",
    tokenInMaxs: Array<Coin> = []
  ) {
    this.sender = sender;
    this.poolId = poolId;
    this.shareOutAmount = shareOutAmount;
    this.tokenInMaxs = tokenInMaxs;
  }
}

export function encodeMsgJoinPool(message: MsgJoinPool): Uint8Array {
  return Protobuf.encode(message, MsgJoinPool.encode);
}

export function decodeMsgJoinPool(buffer: Uint8Array): MsgJoinPool {
  return Protobuf.decode<MsgJoinPool>(buffer, MsgJoinPool.decode);
}
