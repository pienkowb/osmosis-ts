// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Coin } from "../../cosmos/base/v1beta1/Coin";

export class MsgLockAndSuperfluidDelegate {
  static encode(message: MsgLockAndSuperfluidDelegate, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.sender);

    const coins = message.coins;
    for (let i: i32 = 0; i < coins.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Coin.encode(coins[i], writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.valAddr);
  }

  static decode(reader: Reader, length: i32): MsgLockAndSuperfluidDelegate {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgLockAndSuperfluidDelegate();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.sender = reader.string();
          break;

        case 2:
          message.coins.push(Coin.decode(reader, reader.uint32()));
          break;

        case 3:
          message.valAddr = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  sender: string;
  coins: Array<Coin>;
  valAddr: string;

  constructor(
    sender: string = "",
    coins: Array<Coin> = [],
    valAddr: string = ""
  ) {
    this.sender = sender;
    this.coins = coins;
    this.valAddr = valAddr;
  }
}

export function encodeMsgLockAndSuperfluidDelegate(
  message: MsgLockAndSuperfluidDelegate
): Uint8Array {
  return Protobuf.encode(message, MsgLockAndSuperfluidDelegate.encode);
}

export function decodeMsgLockAndSuperfluidDelegate(
  buffer: Uint8Array
): MsgLockAndSuperfluidDelegate {
  return Protobuf.decode<MsgLockAndSuperfluidDelegate>(
    buffer,
    MsgLockAndSuperfluidDelegate.decode
  );
}
