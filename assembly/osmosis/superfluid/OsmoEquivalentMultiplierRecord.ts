// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class OsmoEquivalentMultiplierRecord {
  static encode(message: OsmoEquivalentMultiplierRecord, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.epochNumber);

    writer.uint32(18);
    writer.string(message.denom);

    writer.uint32(26);
    writer.string(message.multiplier);
  }

  static decode(reader: Reader, length: i32): OsmoEquivalentMultiplierRecord {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new OsmoEquivalentMultiplierRecord();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.epochNumber = reader.int64();
          break;

        case 2:
          message.denom = reader.string();
          break;

        case 3:
          message.multiplier = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  epochNumber: i64;
  denom: string;
  multiplier: string;

  constructor(
    epochNumber: i64 = 0,
    denom: string = "",
    multiplier: string = ""
  ) {
    this.epochNumber = epochNumber;
    this.denom = denom;
    this.multiplier = multiplier;
  }
}

export function encodeOsmoEquivalentMultiplierRecord(
  message: OsmoEquivalentMultiplierRecord
): Uint8Array {
  return Protobuf.encode(message, OsmoEquivalentMultiplierRecord.encode);
}

export function decodeOsmoEquivalentMultiplierRecord(
  buffer: Uint8Array
): OsmoEquivalentMultiplierRecord {
  return Protobuf.decode<OsmoEquivalentMultiplierRecord>(
    buffer,
    OsmoEquivalentMultiplierRecord.decode
  );
}
