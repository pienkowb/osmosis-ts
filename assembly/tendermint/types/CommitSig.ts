// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Timestamp } from "../../google/protobuf/Timestamp";
import { BlockIDFlag } from "./BlockIDFlag";

export class CommitSig {
  static encode(message: CommitSig, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.blockIdFlag);

    writer.uint32(18);
    writer.bytes(message.validatorAddress);

    const timestamp = message.timestamp;
    if (timestamp !== null) {
      writer.uint32(26);
      writer.fork();
      Timestamp.encode(timestamp, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.bytes(message.signature);
  }

  static decode(reader: Reader, length: i32): CommitSig {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CommitSig();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.blockIdFlag = reader.int32();
          break;

        case 2:
          message.validatorAddress = reader.bytes();
          break;

        case 3:
          message.timestamp = Timestamp.decode(reader, reader.uint32());
          break;

        case 4:
          message.signature = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  blockIdFlag: BlockIDFlag;
  validatorAddress: Uint8Array;
  timestamp: Timestamp | null;
  signature: Uint8Array;

  constructor(
    blockIdFlag: BlockIDFlag = 0,
    validatorAddress: Uint8Array = new Uint8Array(0),
    timestamp: Timestamp | null = null,
    signature: Uint8Array = new Uint8Array(0)
  ) {
    this.blockIdFlag = blockIdFlag;
    this.validatorAddress = validatorAddress;
    this.timestamp = timestamp;
    this.signature = signature;
  }
}

export function encodeCommitSig(message: CommitSig): Uint8Array {
  return Protobuf.encode(message, CommitSig.encode);
}

export function decodeCommitSig(buffer: Uint8Array): CommitSig {
  return Protobuf.decode<CommitSig>(buffer, CommitSig.decode);
}
