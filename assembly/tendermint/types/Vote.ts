// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { BlockID } from "./BlockID";
import { Timestamp } from "../../google/protobuf/Timestamp";
import { SignedMsgType } from "./SignedMsgType";

export class Vote {
  static encode(message: Vote, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.type);

    writer.uint32(16);
    writer.int64(message.height);

    writer.uint32(24);
    writer.int32(message.round);

    const blockId = message.blockId;
    if (blockId !== null) {
      writer.uint32(34);
      writer.fork();
      BlockID.encode(blockId, writer);
      writer.ldelim();
    }

    const timestamp = message.timestamp;
    if (timestamp !== null) {
      writer.uint32(42);
      writer.fork();
      Timestamp.encode(timestamp, writer);
      writer.ldelim();
    }

    writer.uint32(50);
    writer.bytes(message.validatorAddress);

    writer.uint32(56);
    writer.int32(message.validatorIndex);

    writer.uint32(66);
    writer.bytes(message.signature);
  }

  static decode(reader: Reader, length: i32): Vote {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Vote();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.type = reader.int32();
          break;

        case 2:
          message.height = reader.int64();
          break;

        case 3:
          message.round = reader.int32();
          break;

        case 4:
          message.blockId = BlockID.decode(reader, reader.uint32());
          break;

        case 5:
          message.timestamp = Timestamp.decode(reader, reader.uint32());
          break;

        case 6:
          message.validatorAddress = reader.bytes();
          break;

        case 7:
          message.validatorIndex = reader.int32();
          break;

        case 8:
          message.signature = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  type: SignedMsgType;
  height: i64;
  round: i32;
  blockId: BlockID | null;
  timestamp: Timestamp | null;
  validatorAddress: Uint8Array;
  validatorIndex: i32;
  signature: Uint8Array;

  constructor(
    type: SignedMsgType = 0,
    height: i64 = 0,
    round: i32 = 0,
    blockId: BlockID | null = null,
    timestamp: Timestamp | null = null,
    validatorAddress: Uint8Array = new Uint8Array(0),
    validatorIndex: i32 = 0,
    signature: Uint8Array = new Uint8Array(0)
  ) {
    this.type = type;
    this.height = height;
    this.round = round;
    this.blockId = blockId;
    this.timestamp = timestamp;
    this.validatorAddress = validatorAddress;
    this.validatorIndex = validatorIndex;
    this.signature = signature;
  }
}

export function encodeVote(message: Vote): Uint8Array {
  return Protobuf.encode(message, Vote.encode);
}

export function decodeVote(buffer: Uint8Array): Vote {
  return Protobuf.decode<Vote>(buffer, Vote.decode);
}
