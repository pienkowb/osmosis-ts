// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { BlockID } from "./BlockID";
import { CommitSig } from "./CommitSig";

export class Commit {
  static encode(message: Commit, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.height);

    writer.uint32(16);
    writer.int32(message.round);

    const blockId = message.blockId;
    if (blockId !== null) {
      writer.uint32(26);
      writer.fork();
      BlockID.encode(blockId, writer);
      writer.ldelim();
    }

    const signatures = message.signatures;
    for (let i: i32 = 0; i < signatures.length; ++i) {
      writer.uint32(34);
      writer.fork();
      CommitSig.encode(signatures[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Commit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Commit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.height = reader.int64();
          break;

        case 2:
          message.round = reader.int32();
          break;

        case 3:
          message.blockId = BlockID.decode(reader, reader.uint32());
          break;

        case 4:
          message.signatures.push(CommitSig.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  height: i64;
  round: i32;
  blockId: BlockID | null;
  signatures: Array<CommitSig>;

  constructor(
    height: i64 = 0,
    round: i32 = 0,
    blockId: BlockID | null = null,
    signatures: Array<CommitSig> = []
  ) {
    this.height = height;
    this.round = round;
    this.blockId = blockId;
    this.signatures = signatures;
  }
}

export function encodeCommit(message: Commit): Uint8Array {
  return Protobuf.encode(message, Commit.encode);
}

export function decodeCommit(buffer: Uint8Array): Commit {
  return Protobuf.decode<Commit>(buffer, Commit.decode);
}
