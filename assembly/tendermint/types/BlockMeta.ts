// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { BlockID } from "./BlockID";
import { Header } from "./Header";

export class BlockMeta {
  static encode(message: BlockMeta, writer: Writer): void {
    const blockId = message.blockId;
    if (blockId !== null) {
      writer.uint32(10);
      writer.fork();
      BlockID.encode(blockId, writer);
      writer.ldelim();
    }

    writer.uint32(16);
    writer.int64(message.blockSize);

    const header = message.header;
    if (header !== null) {
      writer.uint32(26);
      writer.fork();
      Header.encode(header, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.int64(message.numTxs);
  }

  static decode(reader: Reader, length: i32): BlockMeta {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockMeta();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.blockId = BlockID.decode(reader, reader.uint32());
          break;

        case 2:
          message.blockSize = reader.int64();
          break;

        case 3:
          message.header = Header.decode(reader, reader.uint32());
          break;

        case 4:
          message.numTxs = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  blockId: BlockID | null;
  blockSize: i64;
  header: Header | null;
  numTxs: i64;

  constructor(
    blockId: BlockID | null = null,
    blockSize: i64 = 0,
    header: Header | null = null,
    numTxs: i64 = 0
  ) {
    this.blockId = blockId;
    this.blockSize = blockSize;
    this.header = header;
    this.numTxs = numTxs;
  }
}

export function encodeBlockMeta(message: BlockMeta): Uint8Array {
  return Protobuf.encode(message, BlockMeta.encode);
}

export function decodeBlockMeta(buffer: Uint8Array): BlockMeta {
  return Protobuf.decode<BlockMeta>(buffer, BlockMeta.decode);
}
