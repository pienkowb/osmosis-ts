// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Header } from "./Header";
import { Commit } from "./Commit";

export class SignedHeader {
  static encode(message: SignedHeader, writer: Writer): void {
    const header = message.header;
    if (header !== null) {
      writer.uint32(10);
      writer.fork();
      Header.encode(header, writer);
      writer.ldelim();
    }

    const commit = message.commit;
    if (commit !== null) {
      writer.uint32(18);
      writer.fork();
      Commit.encode(commit, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SignedHeader {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SignedHeader();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.header = Header.decode(reader, reader.uint32());
          break;

        case 2:
          message.commit = Commit.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  header: Header | null;
  commit: Commit | null;

  constructor(header: Header | null = null, commit: Commit | null = null) {
    this.header = header;
    this.commit = commit;
  }
}

export function encodeSignedHeader(message: SignedHeader): Uint8Array {
  return Protobuf.encode(message, SignedHeader.encode);
}

export function decodeSignedHeader(buffer: Uint8Array): SignedHeader {
  return Protobuf.decode<SignedHeader>(buffer, SignedHeader.decode);
}
