// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { SignedHeader } from "./SignedHeader";
import { ValidatorSet } from "./ValidatorSet";

export class LightBlock {
  static encode(message: LightBlock, writer: Writer): void {
    const signedHeader = message.signedHeader;
    if (signedHeader !== null) {
      writer.uint32(10);
      writer.fork();
      SignedHeader.encode(signedHeader, writer);
      writer.ldelim();
    }

    const validatorSet = message.validatorSet;
    if (validatorSet !== null) {
      writer.uint32(18);
      writer.fork();
      ValidatorSet.encode(validatorSet, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): LightBlock {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new LightBlock();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signedHeader = SignedHeader.decode(reader, reader.uint32());
          break;

        case 2:
          message.validatorSet = ValidatorSet.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  signedHeader: SignedHeader | null;
  validatorSet: ValidatorSet | null;

  constructor(
    signedHeader: SignedHeader | null = null,
    validatorSet: ValidatorSet | null = null
  ) {
    this.signedHeader = signedHeader;
    this.validatorSet = validatorSet;
  }
}

export function encodeLightBlock(message: LightBlock): Uint8Array {
  return Protobuf.encode(message, LightBlock.encode);
}

export function decodeLightBlock(buffer: Uint8Array): LightBlock {
  return Protobuf.decode<LightBlock>(buffer, LightBlock.decode);
}
