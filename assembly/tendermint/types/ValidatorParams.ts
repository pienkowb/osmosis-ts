// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class ValidatorParams {
  static encode(message: ValidatorParams, writer: Writer): void {
    const pubKeyTypes = message.pubKeyTypes;
    if (pubKeyTypes.length !== 0) {
      for (let i: i32 = 0; i < pubKeyTypes.length; ++i) {
        writer.uint32(10);
        writer.string(pubKeyTypes[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): ValidatorParams {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ValidatorParams();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.pubKeyTypes.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  pubKeyTypes: Array<string>;

  constructor(pubKeyTypes: Array<string> = []) {
    this.pubKeyTypes = pubKeyTypes;
  }
}

export function encodeValidatorParams(message: ValidatorParams): Uint8Array {
  return Protobuf.encode(message, ValidatorParams.encode);
}

export function decodeValidatorParams(buffer: Uint8Array): ValidatorParams {
  return Protobuf.decode<ValidatorParams>(buffer, ValidatorParams.decode);
}
