// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

@unmanaged
export class BlockParams {
  static encode(message: BlockParams, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.maxBytes);

    writer.uint32(16);
    writer.int64(message.maxGas);

    writer.uint32(24);
    writer.int64(message.timeIotaMs);
  }

  static decode(reader: Reader, length: i32): BlockParams {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BlockParams();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.maxBytes = reader.int64();
          break;

        case 2:
          message.maxGas = reader.int64();
          break;

        case 3:
          message.timeIotaMs = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  maxBytes: i64;
  maxGas: i64;
  timeIotaMs: i64;

  constructor(maxBytes: i64 = 0, maxGas: i64 = 0, timeIotaMs: i64 = 0) {
    this.maxBytes = maxBytes;
    this.maxGas = maxGas;
    this.timeIotaMs = timeIotaMs;
  }
}

export function encodeBlockParams(message: BlockParams): Uint8Array {
  return Protobuf.encode(message, BlockParams.encode);
}

export function decodeBlockParams(buffer: Uint8Array): BlockParams {
  return Protobuf.decode<BlockParams>(buffer, BlockParams.decode);
}
