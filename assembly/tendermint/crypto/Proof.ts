// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class Proof {
  static encode(message: Proof, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.total);

    writer.uint32(16);
    writer.int64(message.index);

    writer.uint32(26);
    writer.bytes(message.leafHash);

    const aunts = message.aunts;
    if (aunts.length !== 0) {
      for (let i: i32 = 0; i < aunts.length; ++i) {
        writer.uint32(34);
        writer.bytes(aunts[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): Proof {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Proof();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.total = reader.int64();
          break;

        case 2:
          message.index = reader.int64();
          break;

        case 3:
          message.leafHash = reader.bytes();
          break;

        case 4:
          message.aunts.push(reader.bytes());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  total: i64;
  index: i64;
  leafHash: Uint8Array;
  aunts: Array<Uint8Array>;

  constructor(
    total: i64 = 0,
    index: i64 = 0,
    leafHash: Uint8Array = new Uint8Array(0),
    aunts: Array<Uint8Array> = []
  ) {
    this.total = total;
    this.index = index;
    this.leafHash = leafHash;
    this.aunts = aunts;
  }
}

export function encodeProof(message: Proof): Uint8Array {
  return Protobuf.encode(message, Proof.encode);
}

export function decodeProof(buffer: Uint8Array): Proof {
  return Protobuf.decode<Proof>(buffer, Proof.decode);
}
