// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class DominoOp {
  static encode(message: DominoOp, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.key);

    writer.uint32(18);
    writer.string(message.input);

    writer.uint32(26);
    writer.string(message.output);
  }

  static decode(reader: Reader, length: i32): DominoOp {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DominoOp();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.string();
          break;

        case 2:
          message.input = reader.string();
          break;

        case 3:
          message.output = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  key: string;
  input: string;
  output: string;

  constructor(key: string = "", input: string = "", output: string = "") {
    this.key = key;
    this.input = input;
    this.output = output;
  }
}

export function encodeDominoOp(message: DominoOp): Uint8Array {
  return Protobuf.encode(message, DominoOp.encode);
}

export function decodeDominoOp(buffer: Uint8Array): DominoOp {
  return Protobuf.decode<DominoOp>(buffer, DominoOp.decode);
}
