// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { ProofOp } from "./ProofOp";

export class ProofOps {
  static encode(message: ProofOps, writer: Writer): void {
    const ops = message.ops;
    for (let i: i32 = 0; i < ops.length; ++i) {
      writer.uint32(10);
      writer.fork();
      ProofOp.encode(ops[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ProofOps {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ProofOps();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.ops.push(ProofOp.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  ops: Array<ProofOp>;

  constructor(ops: Array<ProofOp> = []) {
    this.ops = ops;
  }
}

export function encodeProofOps(message: ProofOps): Uint8Array {
  return Protobuf.encode(message, ProofOps.encode);
}

export function decodeProofOps(buffer: Uint8Array): ProofOps {
  return Protobuf.decode<ProofOps>(buffer, ProofOps.decode);
}
