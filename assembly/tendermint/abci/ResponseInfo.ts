// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class ResponseInfo {
  static encode(message: ResponseInfo, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.data);

    writer.uint32(18);
    writer.string(message.version);

    writer.uint32(24);
    writer.uint64(message.appVersion);

    writer.uint32(32);
    writer.int64(message.lastBlockHeight);

    writer.uint32(42);
    writer.bytes(message.lastBlockAppHash);
  }

  static decode(reader: Reader, length: i32): ResponseInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ResponseInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.data = reader.string();
          break;

        case 2:
          message.version = reader.string();
          break;

        case 3:
          message.appVersion = reader.uint64();
          break;

        case 4:
          message.lastBlockHeight = reader.int64();
          break;

        case 5:
          message.lastBlockAppHash = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  data: string;
  version: string;
  appVersion: u64;
  lastBlockHeight: i64;
  lastBlockAppHash: Uint8Array;

  constructor(
    data: string = "",
    version: string = "",
    appVersion: u64 = 0,
    lastBlockHeight: i64 = 0,
    lastBlockAppHash: Uint8Array = new Uint8Array(0)
  ) {
    this.data = data;
    this.version = version;
    this.appVersion = appVersion;
    this.lastBlockHeight = lastBlockHeight;
    this.lastBlockAppHash = lastBlockAppHash;
  }
}

export function encodeResponseInfo(message: ResponseInfo): Uint8Array {
  return Protobuf.encode(message, ResponseInfo.encode);
}

export function decodeResponseInfo(buffer: Uint8Array): ResponseInfo {
  return Protobuf.decode<ResponseInfo>(buffer, ResponseInfo.decode);
}
