// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class RequestApplySnapshotChunk {
  static encode(message: RequestApplySnapshotChunk, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.index);

    writer.uint32(18);
    writer.bytes(message.chunk);

    writer.uint32(26);
    writer.string(message.sender);
  }

  static decode(reader: Reader, length: i32): RequestApplySnapshotChunk {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RequestApplySnapshotChunk();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.index = reader.uint32();
          break;

        case 2:
          message.chunk = reader.bytes();
          break;

        case 3:
          message.sender = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  index: u32;
  chunk: Uint8Array;
  sender: string;

  constructor(
    index: u32 = 0,
    chunk: Uint8Array = new Uint8Array(0),
    sender: string = ""
  ) {
    this.index = index;
    this.chunk = chunk;
    this.sender = sender;
  }
}

export function encodeRequestApplySnapshotChunk(
  message: RequestApplySnapshotChunk
): Uint8Array {
  return Protobuf.encode(message, RequestApplySnapshotChunk.encode);
}

export function decodeRequestApplySnapshotChunk(
  buffer: Uint8Array
): RequestApplySnapshotChunk {
  return Protobuf.decode<RequestApplySnapshotChunk>(
    buffer,
    RequestApplySnapshotChunk.decode
  );
}
