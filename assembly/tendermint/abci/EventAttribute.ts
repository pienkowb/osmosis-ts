// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class EventAttribute {
  static encode(message: EventAttribute, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.key);

    writer.uint32(18);
    writer.bytes(message.value);

    writer.uint32(24);
    writer.bool(message.index);
  }

  static decode(reader: Reader, length: i32): EventAttribute {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new EventAttribute();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.bytes();
          break;

        case 2:
          message.value = reader.bytes();
          break;

        case 3:
          message.index = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  key: Uint8Array;
  value: Uint8Array;
  index: bool;

  constructor(
    key: Uint8Array = new Uint8Array(0),
    value: Uint8Array = new Uint8Array(0),
    index: bool = false
  ) {
    this.key = key;
    this.value = value;
    this.index = index;
  }
}

export function encodeEventAttribute(message: EventAttribute): Uint8Array {
  return Protobuf.encode(message, EventAttribute.encode);
}

export function decodeEventAttribute(buffer: Uint8Array): EventAttribute {
  return Protobuf.decode<EventAttribute>(buffer, EventAttribute.decode);
}
