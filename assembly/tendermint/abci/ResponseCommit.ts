// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class ResponseCommit {
  static encode(message: ResponseCommit, writer: Writer): void {
    writer.uint32(18);
    writer.bytes(message.data);

    writer.uint32(24);
    writer.int64(message.retainHeight);
  }

  static decode(reader: Reader, length: i32): ResponseCommit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ResponseCommit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2:
          message.data = reader.bytes();
          break;

        case 3:
          message.retainHeight = reader.int64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  data: Uint8Array;
  retainHeight: i64;

  constructor(data: Uint8Array = new Uint8Array(0), retainHeight: i64 = 0) {
    this.data = data;
    this.retainHeight = retainHeight;
  }
}

export function encodeResponseCommit(message: ResponseCommit): Uint8Array {
  return Protobuf.encode(message, ResponseCommit.encode);
}

export function decodeResponseCommit(buffer: Uint8Array): ResponseCommit {
  return Protobuf.decode<ResponseCommit>(buffer, ResponseCommit.decode);
}
