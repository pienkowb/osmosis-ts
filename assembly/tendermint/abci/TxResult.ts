// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { ResponseDeliverTx } from "./ResponseDeliverTx";

export class TxResult {
  static encode(message: TxResult, writer: Writer): void {
    writer.uint32(8);
    writer.int64(message.height);

    writer.uint32(16);
    writer.uint32(message.index);

    writer.uint32(26);
    writer.bytes(message.tx);

    const result = message.result;
    if (result !== null) {
      writer.uint32(34);
      writer.fork();
      ResponseDeliverTx.encode(result, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): TxResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new TxResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.height = reader.int64();
          break;

        case 2:
          message.index = reader.uint32();
          break;

        case 3:
          message.tx = reader.bytes();
          break;

        case 4:
          message.result = ResponseDeliverTx.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  height: i64;
  index: u32;
  tx: Uint8Array;
  result: ResponseDeliverTx | null;

  constructor(
    height: i64 = 0,
    index: u32 = 0,
    tx: Uint8Array = new Uint8Array(0),
    result: ResponseDeliverTx | null = null
  ) {
    this.height = height;
    this.index = index;
    this.tx = tx;
    this.result = result;
  }
}

export function encodeTxResult(message: TxResult): Uint8Array {
  return Protobuf.encode(message, TxResult.encode);
}

export function decodeTxResult(buffer: Uint8Array): TxResult {
  return Protobuf.decode<TxResult>(buffer, TxResult.decode);
}
