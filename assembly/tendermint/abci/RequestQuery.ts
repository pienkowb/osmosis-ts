// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class RequestQuery {
  static encode(message: RequestQuery, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.data);

    writer.uint32(18);
    writer.string(message.path);

    writer.uint32(24);
    writer.int64(message.height);

    writer.uint32(32);
    writer.bool(message.prove);
  }

  static decode(reader: Reader, length: i32): RequestQuery {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RequestQuery();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.data = reader.bytes();
          break;

        case 2:
          message.path = reader.string();
          break;

        case 3:
          message.height = reader.int64();
          break;

        case 4:
          message.prove = reader.bool();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  data: Uint8Array;
  path: string;
  height: i64;
  prove: bool;

  constructor(
    data: Uint8Array = new Uint8Array(0),
    path: string = "",
    height: i64 = 0,
    prove: bool = false
  ) {
    this.data = data;
    this.path = path;
    this.height = height;
    this.prove = prove;
  }
}

export function encodeRequestQuery(message: RequestQuery): Uint8Array {
  return Protobuf.encode(message, RequestQuery.encode);
}

export function decodeRequestQuery(buffer: Uint8Array): RequestQuery {
  return Protobuf.decode<RequestQuery>(buffer, RequestQuery.decode);
}
