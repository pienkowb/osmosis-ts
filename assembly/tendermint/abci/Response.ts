// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { ResponseException } from "./ResponseException";
import { ResponseEcho } from "./ResponseEcho";
import { ResponseFlush } from "./ResponseFlush";
import { ResponseInfo } from "./ResponseInfo";
import { ResponseSetOption } from "./ResponseSetOption";
import { ResponseInitChain } from "./ResponseInitChain";
import { ResponseQuery } from "./ResponseQuery";
import { ResponseBeginBlock } from "./ResponseBeginBlock";
import { ResponseCheckTx } from "./ResponseCheckTx";
import { ResponseDeliverTx } from "./ResponseDeliverTx";
import { ResponseEndBlock } from "./ResponseEndBlock";
import { ResponseCommit } from "./ResponseCommit";
import { ResponseListSnapshots } from "./ResponseListSnapshots";
import { ResponseOfferSnapshot } from "./ResponseOfferSnapshot";
import { ResponseLoadSnapshotChunk } from "./ResponseLoadSnapshotChunk";
import { ResponseApplySnapshotChunk } from "./ResponseApplySnapshotChunk";

export class Response {
  static encode(message: Response, writer: Writer): void {
    const exception = message.exception;
    if (exception !== null) {
      writer.uint32(10);
      writer.fork();
      ResponseException.encode(exception, writer);
      writer.ldelim();
    }

    const echo = message.echo;
    if (echo !== null) {
      writer.uint32(18);
      writer.fork();
      ResponseEcho.encode(echo, writer);
      writer.ldelim();
    }

    const flush = message.flush;
    if (flush !== null) {
      writer.uint32(26);
      writer.fork();
      ResponseFlush.encode(flush, writer);
      writer.ldelim();
    }

    const info = message.info;
    if (info !== null) {
      writer.uint32(34);
      writer.fork();
      ResponseInfo.encode(info, writer);
      writer.ldelim();
    }

    const setOption = message.setOption;
    if (setOption !== null) {
      writer.uint32(42);
      writer.fork();
      ResponseSetOption.encode(setOption, writer);
      writer.ldelim();
    }

    const initChain = message.initChain;
    if (initChain !== null) {
      writer.uint32(50);
      writer.fork();
      ResponseInitChain.encode(initChain, writer);
      writer.ldelim();
    }

    const query = message.query;
    if (query !== null) {
      writer.uint32(58);
      writer.fork();
      ResponseQuery.encode(query, writer);
      writer.ldelim();
    }

    const beginBlock = message.beginBlock;
    if (beginBlock !== null) {
      writer.uint32(66);
      writer.fork();
      ResponseBeginBlock.encode(beginBlock, writer);
      writer.ldelim();
    }

    const checkTx = message.checkTx;
    if (checkTx !== null) {
      writer.uint32(74);
      writer.fork();
      ResponseCheckTx.encode(checkTx, writer);
      writer.ldelim();
    }

    const deliverTx = message.deliverTx;
    if (deliverTx !== null) {
      writer.uint32(82);
      writer.fork();
      ResponseDeliverTx.encode(deliverTx, writer);
      writer.ldelim();
    }

    const endBlock = message.endBlock;
    if (endBlock !== null) {
      writer.uint32(90);
      writer.fork();
      ResponseEndBlock.encode(endBlock, writer);
      writer.ldelim();
    }

    const commit = message.commit;
    if (commit !== null) {
      writer.uint32(98);
      writer.fork();
      ResponseCommit.encode(commit, writer);
      writer.ldelim();
    }

    const listSnapshots = message.listSnapshots;
    if (listSnapshots !== null) {
      writer.uint32(106);
      writer.fork();
      ResponseListSnapshots.encode(listSnapshots, writer);
      writer.ldelim();
    }

    const offerSnapshot = message.offerSnapshot;
    if (offerSnapshot !== null) {
      writer.uint32(114);
      writer.fork();
      ResponseOfferSnapshot.encode(offerSnapshot, writer);
      writer.ldelim();
    }

    const loadSnapshotChunk = message.loadSnapshotChunk;
    if (loadSnapshotChunk !== null) {
      writer.uint32(122);
      writer.fork();
      ResponseLoadSnapshotChunk.encode(loadSnapshotChunk, writer);
      writer.ldelim();
    }

    const applySnapshotChunk = message.applySnapshotChunk;
    if (applySnapshotChunk !== null) {
      writer.uint32(130);
      writer.fork();
      ResponseApplySnapshotChunk.encode(applySnapshotChunk, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Response {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Response();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.exception = ResponseException.decode(reader, reader.uint32());
          break;

        case 2:
          message.echo = ResponseEcho.decode(reader, reader.uint32());
          break;

        case 3:
          message.flush = ResponseFlush.decode(reader, reader.uint32());
          break;

        case 4:
          message.info = ResponseInfo.decode(reader, reader.uint32());
          break;

        case 5:
          message.setOption = ResponseSetOption.decode(reader, reader.uint32());
          break;

        case 6:
          message.initChain = ResponseInitChain.decode(reader, reader.uint32());
          break;

        case 7:
          message.query = ResponseQuery.decode(reader, reader.uint32());
          break;

        case 8:
          message.beginBlock = ResponseBeginBlock.decode(
            reader,
            reader.uint32()
          );
          break;

        case 9:
          message.checkTx = ResponseCheckTx.decode(reader, reader.uint32());
          break;

        case 10:
          message.deliverTx = ResponseDeliverTx.decode(reader, reader.uint32());
          break;

        case 11:
          message.endBlock = ResponseEndBlock.decode(reader, reader.uint32());
          break;

        case 12:
          message.commit = ResponseCommit.decode(reader, reader.uint32());
          break;

        case 13:
          message.listSnapshots = ResponseListSnapshots.decode(
            reader,
            reader.uint32()
          );
          break;

        case 14:
          message.offerSnapshot = ResponseOfferSnapshot.decode(
            reader,
            reader.uint32()
          );
          break;

        case 15:
          message.loadSnapshotChunk = ResponseLoadSnapshotChunk.decode(
            reader,
            reader.uint32()
          );
          break;

        case 16:
          message.applySnapshotChunk = ResponseApplySnapshotChunk.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  exception: ResponseException | null;
  echo: ResponseEcho | null;
  flush: ResponseFlush | null;
  info: ResponseInfo | null;
  setOption: ResponseSetOption | null;
  initChain: ResponseInitChain | null;
  query: ResponseQuery | null;
  beginBlock: ResponseBeginBlock | null;
  checkTx: ResponseCheckTx | null;
  deliverTx: ResponseDeliverTx | null;
  endBlock: ResponseEndBlock | null;
  commit: ResponseCommit | null;
  listSnapshots: ResponseListSnapshots | null;
  offerSnapshot: ResponseOfferSnapshot | null;
  loadSnapshotChunk: ResponseLoadSnapshotChunk | null;
  applySnapshotChunk: ResponseApplySnapshotChunk | null;

  constructor(
    exception: ResponseException | null = null,
    echo: ResponseEcho | null = null,
    flush: ResponseFlush | null = null,
    info: ResponseInfo | null = null,
    setOption: ResponseSetOption | null = null,
    initChain: ResponseInitChain | null = null,
    query: ResponseQuery | null = null,
    beginBlock: ResponseBeginBlock | null = null,
    checkTx: ResponseCheckTx | null = null,
    deliverTx: ResponseDeliverTx | null = null,
    endBlock: ResponseEndBlock | null = null,
    commit: ResponseCommit | null = null,
    listSnapshots: ResponseListSnapshots | null = null,
    offerSnapshot: ResponseOfferSnapshot | null = null,
    loadSnapshotChunk: ResponseLoadSnapshotChunk | null = null,
    applySnapshotChunk: ResponseApplySnapshotChunk | null = null
  ) {
    this.exception = exception;
    this.echo = echo;
    this.flush = flush;
    this.info = info;
    this.setOption = setOption;
    this.initChain = initChain;
    this.query = query;
    this.beginBlock = beginBlock;
    this.checkTx = checkTx;
    this.deliverTx = deliverTx;
    this.endBlock = endBlock;
    this.commit = commit;
    this.listSnapshots = listSnapshots;
    this.offerSnapshot = offerSnapshot;
    this.loadSnapshotChunk = loadSnapshotChunk;
    this.applySnapshotChunk = applySnapshotChunk;
  }
}

export function encodeResponse(message: Response): Uint8Array {
  return Protobuf.encode(message, Response.encode);
}

export function decodeResponse(buffer: Uint8Array): Response {
  return Protobuf.decode<Response>(buffer, Response.decode);
}
