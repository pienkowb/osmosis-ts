// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { ProofOps } from "../crypto/ProofOps";

export class ResponseQuery {
  static encode(message: ResponseQuery, writer: Writer): void {
    writer.uint32(8);
    writer.uint32(message.code);

    writer.uint32(26);
    writer.string(message.log);

    writer.uint32(34);
    writer.string(message.info);

    writer.uint32(40);
    writer.int64(message.index);

    writer.uint32(50);
    writer.bytes(message.key);

    writer.uint32(58);
    writer.bytes(message.value);

    const proofOps = message.proofOps;
    if (proofOps !== null) {
      writer.uint32(66);
      writer.fork();
      ProofOps.encode(proofOps, writer);
      writer.ldelim();
    }

    writer.uint32(72);
    writer.int64(message.height);

    writer.uint32(82);
    writer.string(message.codespace);
  }

  static decode(reader: Reader, length: i32): ResponseQuery {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ResponseQuery();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.code = reader.uint32();
          break;

        case 3:
          message.log = reader.string();
          break;

        case 4:
          message.info = reader.string();
          break;

        case 5:
          message.index = reader.int64();
          break;

        case 6:
          message.key = reader.bytes();
          break;

        case 7:
          message.value = reader.bytes();
          break;

        case 8:
          message.proofOps = ProofOps.decode(reader, reader.uint32());
          break;

        case 9:
          message.height = reader.int64();
          break;

        case 10:
          message.codespace = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  code: u32;
  log: string;
  info: string;
  index: i64;
  key: Uint8Array;
  value: Uint8Array;
  proofOps: ProofOps | null;
  height: i64;
  codespace: string;

  constructor(
    code: u32 = 0,
    log: string = "",
    info: string = "",
    index: i64 = 0,
    key: Uint8Array = new Uint8Array(0),
    value: Uint8Array = new Uint8Array(0),
    proofOps: ProofOps | null = null,
    height: i64 = 0,
    codespace: string = ""
  ) {
    this.code = code;
    this.log = log;
    this.info = info;
    this.index = index;
    this.key = key;
    this.value = value;
    this.proofOps = proofOps;
    this.height = height;
    this.codespace = codespace;
  }
}

export function encodeResponseQuery(message: ResponseQuery): Uint8Array {
  return Protobuf.encode(message, ResponseQuery.encode);
}

export function decodeResponseQuery(buffer: Uint8Array): ResponseQuery {
  return Protobuf.decode<ResponseQuery>(buffer, ResponseQuery.decode);
}
