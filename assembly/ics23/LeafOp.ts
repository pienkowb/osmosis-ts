// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { HashOp } from "./HashOp";
import { LengthOp } from "./LengthOp";

export class LeafOp {
  static encode(message: LeafOp, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.hash);

    writer.uint32(16);
    writer.int32(message.prehashKey);

    writer.uint32(24);
    writer.int32(message.prehashValue);

    writer.uint32(32);
    writer.int32(message.length);

    writer.uint32(42);
    writer.bytes(message.prefix);
  }

  static decode(reader: Reader, length: i32): LeafOp {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new LeafOp();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.int32();
          break;

        case 2:
          message.prehashKey = reader.int32();
          break;

        case 3:
          message.prehashValue = reader.int32();
          break;

        case 4:
          message.length = reader.int32();
          break;

        case 5:
          message.prefix = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: HashOp;
  prehashKey: HashOp;
  prehashValue: HashOp;
  length: LengthOp;
  prefix: Uint8Array;

  constructor(
    hash: HashOp = 0,
    prehashKey: HashOp = 0,
    prehashValue: HashOp = 0,
    length: LengthOp = 0,
    prefix: Uint8Array = new Uint8Array(0)
  ) {
    this.hash = hash;
    this.prehashKey = prehashKey;
    this.prehashValue = prehashValue;
    this.length = length;
    this.prefix = prefix;
  }
}

export function encodeLeafOp(message: LeafOp): Uint8Array {
  return Protobuf.encode(message, LeafOp.encode);
}

export function decodeLeafOp(buffer: Uint8Array): LeafOp {
  return Protobuf.decode<LeafOp>(buffer, LeafOp.decode);
}
