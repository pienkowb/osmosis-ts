// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { CompressedBatchEntry } from "./CompressedBatchEntry";
import { InnerOp } from "./InnerOp";

export class CompressedBatchProof {
  static encode(message: CompressedBatchProof, writer: Writer): void {
    const entries = message.entries;
    for (let i: i32 = 0; i < entries.length; ++i) {
      writer.uint32(10);
      writer.fork();
      CompressedBatchEntry.encode(entries[i], writer);
      writer.ldelim();
    }

    const lookupInners = message.lookupInners;
    for (let i: i32 = 0; i < lookupInners.length; ++i) {
      writer.uint32(18);
      writer.fork();
      InnerOp.encode(lookupInners[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): CompressedBatchProof {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CompressedBatchProof();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.entries.push(
            CompressedBatchEntry.decode(reader, reader.uint32())
          );
          break;

        case 2:
          message.lookupInners.push(InnerOp.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  entries: Array<CompressedBatchEntry>;
  lookupInners: Array<InnerOp>;

  constructor(
    entries: Array<CompressedBatchEntry> = [],
    lookupInners: Array<InnerOp> = []
  ) {
    this.entries = entries;
    this.lookupInners = lookupInners;
  }
}

export function encodeCompressedBatchProof(
  message: CompressedBatchProof
): Uint8Array {
  return Protobuf.encode(message, CompressedBatchProof.encode);
}

export function decodeCompressedBatchProof(
  buffer: Uint8Array
): CompressedBatchProof {
  return Protobuf.decode<CompressedBatchProof>(
    buffer,
    CompressedBatchProof.decode
  );
}
