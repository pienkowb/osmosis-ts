// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { CompressedExistenceProof } from "./CompressedExistenceProof";

export class CompressedNonExistenceProof {
  static encode(message: CompressedNonExistenceProof, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.key);

    const left = message.left;
    if (left !== null) {
      writer.uint32(18);
      writer.fork();
      CompressedExistenceProof.encode(left, writer);
      writer.ldelim();
    }

    const right = message.right;
    if (right !== null) {
      writer.uint32(26);
      writer.fork();
      CompressedExistenceProof.encode(right, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): CompressedNonExistenceProof {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CompressedNonExistenceProof();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.key = reader.bytes();
          break;

        case 2:
          message.left = CompressedExistenceProof.decode(
            reader,
            reader.uint32()
          );
          break;

        case 3:
          message.right = CompressedExistenceProof.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  key: Uint8Array;
  left: CompressedExistenceProof | null;
  right: CompressedExistenceProof | null;

  constructor(
    key: Uint8Array = new Uint8Array(0),
    left: CompressedExistenceProof | null = null,
    right: CompressedExistenceProof | null = null
  ) {
    this.key = key;
    this.left = left;
    this.right = right;
  }
}

export function encodeCompressedNonExistenceProof(
  message: CompressedNonExistenceProof
): Uint8Array {
  return Protobuf.encode(message, CompressedNonExistenceProof.encode);
}

export function decodeCompressedNonExistenceProof(
  buffer: Uint8Array
): CompressedNonExistenceProof {
  return Protobuf.decode<CompressedNonExistenceProof>(
    buffer,
    CompressedNonExistenceProof.decode
  );
}
