// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { LeafOp } from "./LeafOp";
import { InnerSpec } from "./InnerSpec";

export class ProofSpec {
  static encode(message: ProofSpec, writer: Writer): void {
    const leafSpec = message.leafSpec;
    if (leafSpec !== null) {
      writer.uint32(10);
      writer.fork();
      LeafOp.encode(leafSpec, writer);
      writer.ldelim();
    }

    const innerSpec = message.innerSpec;
    if (innerSpec !== null) {
      writer.uint32(18);
      writer.fork();
      InnerSpec.encode(innerSpec, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int32(message.maxDepth);

    writer.uint32(32);
    writer.int32(message.minDepth);
  }

  static decode(reader: Reader, length: i32): ProofSpec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ProofSpec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.leafSpec = LeafOp.decode(reader, reader.uint32());
          break;

        case 2:
          message.innerSpec = InnerSpec.decode(reader, reader.uint32());
          break;

        case 3:
          message.maxDepth = reader.int32();
          break;

        case 4:
          message.minDepth = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  leafSpec: LeafOp | null;
  innerSpec: InnerSpec | null;
  maxDepth: i32;
  minDepth: i32;

  constructor(
    leafSpec: LeafOp | null = null,
    innerSpec: InnerSpec | null = null,
    maxDepth: i32 = 0,
    minDepth: i32 = 0
  ) {
    this.leafSpec = leafSpec;
    this.innerSpec = innerSpec;
    this.maxDepth = maxDepth;
    this.minDepth = minDepth;
  }
}

export function encodeProofSpec(message: ProofSpec): Uint8Array {
  return Protobuf.encode(message, ProofSpec.encode);
}

export function decodeProofSpec(buffer: Uint8Array): ProofSpec {
  return Protobuf.decode<ProofSpec>(buffer, ProofSpec.decode);
}
