// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { CompressedExistenceProof } from "./CompressedExistenceProof";
import { CompressedNonExistenceProof } from "./CompressedNonExistenceProof";

export class CompressedBatchEntry {
  static encode(message: CompressedBatchEntry, writer: Writer): void {
    const exist = message.exist;
    if (exist !== null) {
      writer.uint32(10);
      writer.fork();
      CompressedExistenceProof.encode(exist, writer);
      writer.ldelim();
    }

    const nonexist = message.nonexist;
    if (nonexist !== null) {
      writer.uint32(18);
      writer.fork();
      CompressedNonExistenceProof.encode(nonexist, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): CompressedBatchEntry {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CompressedBatchEntry();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.exist = CompressedExistenceProof.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.nonexist = CompressedNonExistenceProof.decode(
            reader,
            reader.uint32()
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  exist: CompressedExistenceProof | null;
  nonexist: CompressedNonExistenceProof | null;

  constructor(
    exist: CompressedExistenceProof | null = null,
    nonexist: CompressedNonExistenceProof | null = null
  ) {
    this.exist = exist;
    this.nonexist = nonexist;
  }
}

export function encodeCompressedBatchEntry(
  message: CompressedBatchEntry
): Uint8Array {
  return Protobuf.encode(message, CompressedBatchEntry.encode);
}

export function decodeCompressedBatchEntry(
  buffer: Uint8Array
): CompressedBatchEntry {
  return Protobuf.decode<CompressedBatchEntry>(
    buffer,
    CompressedBatchEntry.decode
  );
}
