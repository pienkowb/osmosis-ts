// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { HashOp } from "./HashOp";

export class InnerOp {
  static encode(message: InnerOp, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.hash);

    writer.uint32(18);
    writer.bytes(message.prefix);

    writer.uint32(26);
    writer.bytes(message.suffix);
  }

  static decode(reader: Reader, length: i32): InnerOp {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InnerOp();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.hash = reader.int32();
          break;

        case 2:
          message.prefix = reader.bytes();
          break;

        case 3:
          message.suffix = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  hash: HashOp;
  prefix: Uint8Array;
  suffix: Uint8Array;

  constructor(
    hash: HashOp = 0,
    prefix: Uint8Array = new Uint8Array(0),
    suffix: Uint8Array = new Uint8Array(0)
  ) {
    this.hash = hash;
    this.prefix = prefix;
    this.suffix = suffix;
  }
}

export function encodeInnerOp(message: InnerOp): Uint8Array {
  return Protobuf.encode(message, InnerOp.encode);
}

export function decodeInnerOp(buffer: Uint8Array): InnerOp {
  return Protobuf.decode<InnerOp>(buffer, InnerOp.decode);
}
