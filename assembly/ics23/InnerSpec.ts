// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { HashOp } from "./HashOp";

export class InnerSpec {
  static encode(message: InnerSpec, writer: Writer): void {
    const childOrder = message.childOrder;
    if (childOrder.length !== 0) {
      for (let i: i32 = 0; i < childOrder.length; ++i) {
        writer.uint32(8);
        writer.int32(childOrder[i]);
      }
    }

    writer.uint32(16);
    writer.int32(message.childSize);

    writer.uint32(24);
    writer.int32(message.minPrefixLength);

    writer.uint32(32);
    writer.int32(message.maxPrefixLength);

    writer.uint32(42);
    writer.bytes(message.emptyChild);

    writer.uint32(48);
    writer.int32(message.hash);
  }

  static decode(reader: Reader, length: i32): InnerSpec {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InnerSpec();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.childOrder.push(reader.int32());
          break;

        case 2:
          message.childSize = reader.int32();
          break;

        case 3:
          message.minPrefixLength = reader.int32();
          break;

        case 4:
          message.maxPrefixLength = reader.int32();
          break;

        case 5:
          message.emptyChild = reader.bytes();
          break;

        case 6:
          message.hash = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  childOrder: Array<i32>;
  childSize: i32;
  minPrefixLength: i32;
  maxPrefixLength: i32;
  emptyChild: Uint8Array;
  hash: HashOp;

  constructor(
    childOrder: Array<i32> = [],
    childSize: i32 = 0,
    minPrefixLength: i32 = 0,
    maxPrefixLength: i32 = 0,
    emptyChild: Uint8Array = new Uint8Array(0),
    hash: HashOp = 0
  ) {
    this.childOrder = childOrder;
    this.childSize = childSize;
    this.minPrefixLength = minPrefixLength;
    this.maxPrefixLength = maxPrefixLength;
    this.emptyChild = emptyChild;
    this.hash = hash;
  }
}

export function encodeInnerSpec(message: InnerSpec): Uint8Array {
  return Protobuf.encode(message, InnerSpec.encode);
}

export function decodeInnerSpec(buffer: Uint8Array): InnerSpec {
  return Protobuf.decode<InnerSpec>(buffer, InnerSpec.decode);
}
