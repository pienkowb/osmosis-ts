// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { TxResponse } from "./TxResponse";

export class SearchTxsResult {
  static encode(message: SearchTxsResult, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.totalCount);

    writer.uint32(16);
    writer.uint64(message.count);

    writer.uint32(24);
    writer.uint64(message.pageNumber);

    writer.uint32(32);
    writer.uint64(message.pageTotal);

    writer.uint32(40);
    writer.uint64(message.limit);

    const txs = message.txs;
    for (let i: i32 = 0; i < txs.length; ++i) {
      writer.uint32(50);
      writer.fork();
      TxResponse.encode(txs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SearchTxsResult {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SearchTxsResult();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.totalCount = reader.uint64();
          break;

        case 2:
          message.count = reader.uint64();
          break;

        case 3:
          message.pageNumber = reader.uint64();
          break;

        case 4:
          message.pageTotal = reader.uint64();
          break;

        case 5:
          message.limit = reader.uint64();
          break;

        case 6:
          message.txs.push(TxResponse.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  totalCount: u64;
  count: u64;
  pageNumber: u64;
  pageTotal: u64;
  limit: u64;
  txs: Array<TxResponse>;

  constructor(
    totalCount: u64 = 0,
    count: u64 = 0,
    pageNumber: u64 = 0,
    pageTotal: u64 = 0,
    limit: u64 = 0,
    txs: Array<TxResponse> = []
  ) {
    this.totalCount = totalCount;
    this.count = count;
    this.pageNumber = pageNumber;
    this.pageTotal = pageTotal;
    this.limit = limit;
    this.txs = txs;
  }
}

export function encodeSearchTxsResult(message: SearchTxsResult): Uint8Array {
  return Protobuf.encode(message, SearchTxsResult.encode);
}

export function decodeSearchTxsResult(buffer: Uint8Array): SearchTxsResult {
  return Protobuf.decode<SearchTxsResult>(buffer, SearchTxsResult.decode);
}
