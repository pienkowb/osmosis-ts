// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { GasInfo } from "./GasInfo";
import { Result } from "./Result";

export class SimulationResponse {
  static encode(message: SimulationResponse, writer: Writer): void {
    const gasInfo = message.gasInfo;
    if (gasInfo !== null) {
      writer.uint32(10);
      writer.fork();
      GasInfo.encode(gasInfo, writer);
      writer.ldelim();
    }

    const result = message.result;
    if (result !== null) {
      writer.uint32(18);
      writer.fork();
      Result.encode(result, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): SimulationResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SimulationResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.gasInfo = GasInfo.decode(reader, reader.uint32());
          break;

        case 2:
          message.result = Result.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  gasInfo: GasInfo | null;
  result: Result | null;

  constructor(gasInfo: GasInfo | null = null, result: Result | null = null) {
    this.gasInfo = gasInfo;
    this.result = result;
  }
}

export function encodeSimulationResponse(
  message: SimulationResponse
): Uint8Array {
  return Protobuf.encode(message, SimulationResponse.encode);
}

export function decodeSimulationResponse(
  buffer: Uint8Array
): SimulationResponse {
  return Protobuf.decode<SimulationResponse>(buffer, SimulationResponse.decode);
}
