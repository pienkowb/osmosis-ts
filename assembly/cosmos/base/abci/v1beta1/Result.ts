// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Event } from "../../../../tendermint/abci/Event";

export class Result {
  static encode(message: Result, writer: Writer): void {
    writer.uint32(10);
    writer.bytes(message.data);

    writer.uint32(18);
    writer.string(message.log);

    const events = message.events;
    for (let i: i32 = 0; i < events.length; ++i) {
      writer.uint32(26);
      writer.fork();
      Event.encode(events[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Result {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Result();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.data = reader.bytes();
          break;

        case 2:
          message.log = reader.string();
          break;

        case 3:
          message.events.push(Event.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  data: Uint8Array;
  log: string;
  events: Array<Event>;

  constructor(
    data: Uint8Array = new Uint8Array(0),
    log: string = "",
    events: Array<Event> = []
  ) {
    this.data = data;
    this.log = log;
    this.events = events;
  }
}

export function encodeResult(message: Result): Uint8Array {
  return Protobuf.encode(message, Result.encode);
}

export function decodeResult(buffer: Uint8Array): Result {
  return Protobuf.decode<Result>(buffer, Result.decode);
}
