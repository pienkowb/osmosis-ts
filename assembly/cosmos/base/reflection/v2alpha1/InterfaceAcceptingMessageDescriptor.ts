// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class InterfaceAcceptingMessageDescriptor {
  static encode(
    message: InterfaceAcceptingMessageDescriptor,
    writer: Writer
  ): void {
    writer.uint32(10);
    writer.string(message.fullname);

    const fieldDescriptorNames = message.fieldDescriptorNames;
    if (fieldDescriptorNames.length !== 0) {
      for (let i: i32 = 0; i < fieldDescriptorNames.length; ++i) {
        writer.uint32(18);
        writer.string(fieldDescriptorNames[i]);
      }
    }
  }

  static decode(
    reader: Reader,
    length: i32
  ): InterfaceAcceptingMessageDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InterfaceAcceptingMessageDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fullname = reader.string();
          break;

        case 2:
          message.fieldDescriptorNames.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  fullname: string;
  fieldDescriptorNames: Array<string>;

  constructor(fullname: string = "", fieldDescriptorNames: Array<string> = []) {
    this.fullname = fullname;
    this.fieldDescriptorNames = fieldDescriptorNames;
  }
}

export function encodeInterfaceAcceptingMessageDescriptor(
  message: InterfaceAcceptingMessageDescriptor
): Uint8Array {
  return Protobuf.encode(message, InterfaceAcceptingMessageDescriptor.encode);
}

export function decodeInterfaceAcceptingMessageDescriptor(
  buffer: Uint8Array
): InterfaceAcceptingMessageDescriptor {
  return Protobuf.decode<InterfaceAcceptingMessageDescriptor>(
    buffer,
    InterfaceAcceptingMessageDescriptor.decode
  );
}
