// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { InterfaceAcceptingMessageDescriptor } from "./InterfaceAcceptingMessageDescriptor";
import { InterfaceImplementerDescriptor } from "./InterfaceImplementerDescriptor";

export class InterfaceDescriptor {
  static encode(message: InterfaceDescriptor, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.fullname);

    const interfaceAcceptingMessages = message.interfaceAcceptingMessages;
    for (let i: i32 = 0; i < interfaceAcceptingMessages.length; ++i) {
      writer.uint32(18);
      writer.fork();
      InterfaceAcceptingMessageDescriptor.encode(
        interfaceAcceptingMessages[i],
        writer
      );
      writer.ldelim();
    }

    const interfaceImplementers = message.interfaceImplementers;
    for (let i: i32 = 0; i < interfaceImplementers.length; ++i) {
      writer.uint32(26);
      writer.fork();
      InterfaceImplementerDescriptor.encode(interfaceImplementers[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): InterfaceDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new InterfaceDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fullname = reader.string();
          break;

        case 2:
          message.interfaceAcceptingMessages.push(
            InterfaceAcceptingMessageDescriptor.decode(reader, reader.uint32())
          );
          break;

        case 3:
          message.interfaceImplementers.push(
            InterfaceImplementerDescriptor.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  fullname: string;
  interfaceAcceptingMessages: Array<InterfaceAcceptingMessageDescriptor>;
  interfaceImplementers: Array<InterfaceImplementerDescriptor>;

  constructor(
    fullname: string = "",
    interfaceAcceptingMessages: Array<InterfaceAcceptingMessageDescriptor> = [],
    interfaceImplementers: Array<InterfaceImplementerDescriptor> = []
  ) {
    this.fullname = fullname;
    this.interfaceAcceptingMessages = interfaceAcceptingMessages;
    this.interfaceImplementers = interfaceImplementers;
  }
}

export function encodeInterfaceDescriptor(
  message: InterfaceDescriptor
): Uint8Array {
  return Protobuf.encode(message, InterfaceDescriptor.encode);
}

export function decodeInterfaceDescriptor(
  buffer: Uint8Array
): InterfaceDescriptor {
  return Protobuf.decode<InterfaceDescriptor>(
    buffer,
    InterfaceDescriptor.decode
  );
}
