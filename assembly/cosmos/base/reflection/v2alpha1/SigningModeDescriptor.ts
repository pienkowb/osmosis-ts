// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class SigningModeDescriptor {
  static encode(message: SigningModeDescriptor, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.name);

    writer.uint32(16);
    writer.int32(message.number);

    writer.uint32(26);
    writer.string(message.authnInfoProviderMethodFullname);
  }

  static decode(reader: Reader, length: i32): SigningModeDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new SigningModeDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.name = reader.string();
          break;

        case 2:
          message.number = reader.int32();
          break;

        case 3:
          message.authnInfoProviderMethodFullname = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  name: string;
  number: i32;
  authnInfoProviderMethodFullname: string;

  constructor(
    name: string = "",
    number: i32 = 0,
    authnInfoProviderMethodFullname: string = ""
  ) {
    this.name = name;
    this.number = number;
    this.authnInfoProviderMethodFullname = authnInfoProviderMethodFullname;
  }
}

export function encodeSigningModeDescriptor(
  message: SigningModeDescriptor
): Uint8Array {
  return Protobuf.encode(message, SigningModeDescriptor.encode);
}

export function decodeSigningModeDescriptor(
  buffer: Uint8Array
): SigningModeDescriptor {
  return Protobuf.decode<SigningModeDescriptor>(
    buffer,
    SigningModeDescriptor.decode
  );
}
