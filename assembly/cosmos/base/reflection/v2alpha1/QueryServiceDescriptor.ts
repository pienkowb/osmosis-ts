// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { QueryMethodDescriptor } from "./QueryMethodDescriptor";

export class QueryServiceDescriptor {
  static encode(message: QueryServiceDescriptor, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.fullname);

    writer.uint32(16);
    writer.bool(message.isModule);

    const methods = message.methods;
    for (let i: i32 = 0; i < methods.length; ++i) {
      writer.uint32(26);
      writer.fork();
      QueryMethodDescriptor.encode(methods[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): QueryServiceDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new QueryServiceDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.fullname = reader.string();
          break;

        case 2:
          message.isModule = reader.bool();
          break;

        case 3:
          message.methods.push(
            QueryMethodDescriptor.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  fullname: string;
  isModule: bool;
  methods: Array<QueryMethodDescriptor>;

  constructor(
    fullname: string = "",
    isModule: bool = false,
    methods: Array<QueryMethodDescriptor> = []
  ) {
    this.fullname = fullname;
    this.isModule = isModule;
    this.methods = methods;
  }
}

export function encodeQueryServiceDescriptor(
  message: QueryServiceDescriptor
): Uint8Array {
  return Protobuf.encode(message, QueryServiceDescriptor.encode);
}

export function decodeQueryServiceDescriptor(
  buffer: Uint8Array
): QueryServiceDescriptor {
  return Protobuf.decode<QueryServiceDescriptor>(
    buffer,
    QueryServiceDescriptor.decode
  );
}
