// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { SigningModeDescriptor } from "./SigningModeDescriptor";

export class AuthnDescriptor {
  static encode(message: AuthnDescriptor, writer: Writer): void {
    const signModes = message.signModes;
    for (let i: i32 = 0; i < signModes.length; ++i) {
      writer.uint32(10);
      writer.fork();
      SigningModeDescriptor.encode(signModes[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): AuthnDescriptor {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new AuthnDescriptor();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.signModes.push(
            SigningModeDescriptor.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  signModes: Array<SigningModeDescriptor>;

  constructor(signModes: Array<SigningModeDescriptor> = []) {
    this.signModes = signModes;
  }
}

export function encodeAuthnDescriptor(message: AuthnDescriptor): Uint8Array {
  return Protobuf.encode(message, AuthnDescriptor.encode);
}

export function decodeAuthnDescriptor(buffer: Uint8Array): AuthnDescriptor {
  return Protobuf.decode<AuthnDescriptor>(buffer, AuthnDescriptor.decode);
}
