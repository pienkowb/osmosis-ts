// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Any } from "../../../google/protobuf/Any";

export class BaseAccount {
  static encode(message: BaseAccount, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.address);

    const pubKey = message.pubKey;
    if (pubKey !== null) {
      writer.uint32(18);
      writer.fork();
      Any.encode(pubKey, writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.uint64(message.accountNumber);

    writer.uint32(32);
    writer.uint64(message.sequence);
  }

  static decode(reader: Reader, length: i32): BaseAccount {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new BaseAccount();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.address = reader.string();
          break;

        case 2:
          message.pubKey = Any.decode(reader, reader.uint32());
          break;

        case 3:
          message.accountNumber = reader.uint64();
          break;

        case 4:
          message.sequence = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  address: string;
  pubKey: Any | null;
  accountNumber: u64;
  sequence: u64;

  constructor(
    address: string = "",
    pubKey: Any | null = null,
    accountNumber: u64 = 0,
    sequence: u64 = 0
  ) {
    this.address = address;
    this.pubKey = pubKey;
    this.accountNumber = accountNumber;
    this.sequence = sequence;
  }
}

export function encodeBaseAccount(message: BaseAccount): Uint8Array {
  return Protobuf.encode(message, BaseAccount.encode);
}

export function decodeBaseAccount(buffer: Uint8Array): BaseAccount {
  return Protobuf.decode<BaseAccount>(buffer, BaseAccount.decode);
}
