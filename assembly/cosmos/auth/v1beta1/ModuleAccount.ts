// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { BaseAccount } from "./BaseAccount";

export class ModuleAccount {
  static encode(message: ModuleAccount, writer: Writer): void {
    const baseAccount = message.baseAccount;
    if (baseAccount !== null) {
      writer.uint32(10);
      writer.fork();
      BaseAccount.encode(baseAccount, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.name);

    const permissions = message.permissions;
    if (permissions.length !== 0) {
      for (let i: i32 = 0; i < permissions.length; ++i) {
        writer.uint32(26);
        writer.string(permissions[i]);
      }
    }
  }

  static decode(reader: Reader, length: i32): ModuleAccount {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ModuleAccount();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.baseAccount = BaseAccount.decode(reader, reader.uint32());
          break;

        case 2:
          message.name = reader.string();
          break;

        case 3:
          message.permissions.push(reader.string());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  baseAccount: BaseAccount | null;
  name: string;
  permissions: Array<string>;

  constructor(
    baseAccount: BaseAccount | null = null,
    name: string = "",
    permissions: Array<string> = []
  ) {
    this.baseAccount = baseAccount;
    this.name = name;
    this.permissions = permissions;
  }
}

export function encodeModuleAccount(message: ModuleAccount): Uint8Array {
  return Protobuf.encode(message, ModuleAccount.encode);
}

export function decodeModuleAccount(buffer: Uint8Array): ModuleAccount {
  return Protobuf.decode<ModuleAccount>(buffer, ModuleAccount.decode);
}
