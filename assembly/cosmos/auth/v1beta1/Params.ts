// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

@unmanaged
export class Params {
  static encode(message: Params, writer: Writer): void {
    writer.uint32(8);
    writer.uint64(message.maxMemoCharacters);

    writer.uint32(16);
    writer.uint64(message.txSigLimit);

    writer.uint32(24);
    writer.uint64(message.txSizeCostPerByte);

    writer.uint32(32);
    writer.uint64(message.sigVerifyCostEd25519);

    writer.uint32(40);
    writer.uint64(message.sigVerifyCostSecp256k1);
  }

  static decode(reader: Reader, length: i32): Params {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Params();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.maxMemoCharacters = reader.uint64();
          break;

        case 2:
          message.txSigLimit = reader.uint64();
          break;

        case 3:
          message.txSizeCostPerByte = reader.uint64();
          break;

        case 4:
          message.sigVerifyCostEd25519 = reader.uint64();
          break;

        case 5:
          message.sigVerifyCostSecp256k1 = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  maxMemoCharacters: u64;
  txSigLimit: u64;
  txSizeCostPerByte: u64;
  sigVerifyCostEd25519: u64;
  sigVerifyCostSecp256k1: u64;

  constructor(
    maxMemoCharacters: u64 = 0,
    txSigLimit: u64 = 0,
    txSizeCostPerByte: u64 = 0,
    sigVerifyCostEd25519: u64 = 0,
    sigVerifyCostSecp256k1: u64 = 0
  ) {
    this.maxMemoCharacters = maxMemoCharacters;
    this.txSigLimit = txSigLimit;
    this.txSizeCostPerByte = txSizeCostPerByte;
    this.sigVerifyCostEd25519 = sigVerifyCostEd25519;
    this.sigVerifyCostSecp256k1 = sigVerifyCostSecp256k1;
  }
}

export function encodeParams(message: Params): Uint8Array {
  return Protobuf.encode(message, Params.encode);
}

export function decodeParams(buffer: Uint8Array): Params {
  return Protobuf.decode<Params>(buffer, Params.decode);
}
