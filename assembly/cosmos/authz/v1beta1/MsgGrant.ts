// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Grant } from "./Grant";

export class MsgGrant {
  static encode(message: MsgGrant, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.granter);

    writer.uint32(18);
    writer.string(message.grantee);

    const grant = message.grant;
    if (grant !== null) {
      writer.uint32(26);
      writer.fork();
      Grant.encode(grant, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgGrant {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgGrant();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.granter = reader.string();
          break;

        case 2:
          message.grantee = reader.string();
          break;

        case 3:
          message.grant = Grant.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  granter: string;
  grantee: string;
  grant: Grant | null;

  constructor(
    granter: string = "",
    grantee: string = "",
    grant: Grant | null = null
  ) {
    this.granter = granter;
    this.grantee = grantee;
    this.grant = grant;
  }
}

export function encodeMsgGrant(message: MsgGrant): Uint8Array {
  return Protobuf.encode(message, MsgGrant.encode);
}

export function decodeMsgGrant(buffer: Uint8Array): MsgGrant {
  return Protobuf.decode<MsgGrant>(buffer, MsgGrant.decode);
}
