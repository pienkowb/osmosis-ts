// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class DVPair {
  static encode(message: DVPair, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.delegatorAddress);

    writer.uint32(18);
    writer.string(message.validatorAddress);
  }

  static decode(reader: Reader, length: i32): DVPair {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DVPair();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegatorAddress = reader.string();
          break;

        case 2:
          message.validatorAddress = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegatorAddress: string;
  validatorAddress: string;

  constructor(delegatorAddress: string = "", validatorAddress: string = "") {
    this.delegatorAddress = delegatorAddress;
    this.validatorAddress = validatorAddress;
  }
}

export function encodeDVPair(message: DVPair): Uint8Array {
  return Protobuf.encode(message, DVPair.encode);
}

export function decodeDVPair(buffer: Uint8Array): DVPair {
  return Protobuf.decode<DVPair>(buffer, DVPair.decode);
}
