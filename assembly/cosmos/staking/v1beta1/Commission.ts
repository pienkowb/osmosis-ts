// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { CommissionRates } from "./CommissionRates";
import { Timestamp } from "../../../google/protobuf/Timestamp";

export class Commission {
  static encode(message: Commission, writer: Writer): void {
    const commissionRates = message.commissionRates;
    if (commissionRates !== null) {
      writer.uint32(10);
      writer.fork();
      CommissionRates.encode(commissionRates, writer);
      writer.ldelim();
    }

    const updateTime = message.updateTime;
    if (updateTime !== null) {
      writer.uint32(18);
      writer.fork();
      Timestamp.encode(updateTime, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Commission {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Commission();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.commissionRates = CommissionRates.decode(
            reader,
            reader.uint32()
          );
          break;

        case 2:
          message.updateTime = Timestamp.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  commissionRates: CommissionRates | null;
  updateTime: Timestamp | null;

  constructor(
    commissionRates: CommissionRates | null = null,
    updateTime: Timestamp | null = null
  ) {
    this.commissionRates = commissionRates;
    this.updateTime = updateTime;
  }
}

export function encodeCommission(message: Commission): Uint8Array {
  return Protobuf.encode(message, Commission.encode);
}

export function decodeCommission(buffer: Uint8Array): Commission {
  return Protobuf.decode<Commission>(buffer, Commission.decode);
}
