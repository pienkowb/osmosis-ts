// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Description } from "./Description";
import { CommissionRates } from "./CommissionRates";
import { Any } from "../../../google/protobuf/Any";
import { Coin } from "../../base/v1beta1/Coin";

export class MsgCreateValidator {
  static encode(message: MsgCreateValidator, writer: Writer): void {
    const description = message.description;
    if (description !== null) {
      writer.uint32(10);
      writer.fork();
      Description.encode(description, writer);
      writer.ldelim();
    }

    const commission = message.commission;
    if (commission !== null) {
      writer.uint32(18);
      writer.fork();
      CommissionRates.encode(commission, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.minSelfDelegation);

    writer.uint32(34);
    writer.string(message.delegatorAddress);

    writer.uint32(42);
    writer.string(message.validatorAddress);

    const pubkey = message.pubkey;
    if (pubkey !== null) {
      writer.uint32(50);
      writer.fork();
      Any.encode(pubkey, writer);
      writer.ldelim();
    }

    const value = message.value;
    if (value !== null) {
      writer.uint32(58);
      writer.fork();
      Coin.encode(value, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MsgCreateValidator {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgCreateValidator();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.description = Description.decode(reader, reader.uint32());
          break;

        case 2:
          message.commission = CommissionRates.decode(reader, reader.uint32());
          break;

        case 3:
          message.minSelfDelegation = reader.string();
          break;

        case 4:
          message.delegatorAddress = reader.string();
          break;

        case 5:
          message.validatorAddress = reader.string();
          break;

        case 6:
          message.pubkey = Any.decode(reader, reader.uint32());
          break;

        case 7:
          message.value = Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  description: Description | null;
  commission: CommissionRates | null;
  minSelfDelegation: string;
  delegatorAddress: string;
  validatorAddress: string;
  pubkey: Any | null;
  value: Coin | null;

  constructor(
    description: Description | null = null,
    commission: CommissionRates | null = null,
    minSelfDelegation: string = "",
    delegatorAddress: string = "",
    validatorAddress: string = "",
    pubkey: Any | null = null,
    value: Coin | null = null
  ) {
    this.description = description;
    this.commission = commission;
    this.minSelfDelegation = minSelfDelegation;
    this.delegatorAddress = delegatorAddress;
    this.validatorAddress = validatorAddress;
    this.pubkey = pubkey;
    this.value = value;
  }
}

export function encodeMsgCreateValidator(
  message: MsgCreateValidator
): Uint8Array {
  return Protobuf.encode(message, MsgCreateValidator.encode);
}

export function decodeMsgCreateValidator(
  buffer: Uint8Array
): MsgCreateValidator {
  return Protobuf.decode<MsgCreateValidator>(buffer, MsgCreateValidator.decode);
}
