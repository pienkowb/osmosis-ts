// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class CommissionRates {
  static encode(message: CommissionRates, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.rate);

    writer.uint32(18);
    writer.string(message.maxRate);

    writer.uint32(26);
    writer.string(message.maxChangeRate);
  }

  static decode(reader: Reader, length: i32): CommissionRates {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new CommissionRates();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.rate = reader.string();
          break;

        case 2:
          message.maxRate = reader.string();
          break;

        case 3:
          message.maxChangeRate = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  rate: string;
  maxRate: string;
  maxChangeRate: string;

  constructor(
    rate: string = "",
    maxRate: string = "",
    maxChangeRate: string = ""
  ) {
    this.rate = rate;
    this.maxRate = maxRate;
    this.maxChangeRate = maxChangeRate;
  }
}

export function encodeCommissionRates(message: CommissionRates): Uint8Array {
  return Protobuf.encode(message, CommissionRates.encode);
}

export function decodeCommissionRates(buffer: Uint8Array): CommissionRates {
  return Protobuf.decode<CommissionRates>(buffer, CommissionRates.decode);
}
