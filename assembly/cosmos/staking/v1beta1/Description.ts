// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class Description {
  static encode(message: Description, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.moniker);

    writer.uint32(18);
    writer.string(message.identity);

    writer.uint32(26);
    writer.string(message.website);

    writer.uint32(34);
    writer.string(message.securityContact);

    writer.uint32(42);
    writer.string(message.details);
  }

  static decode(reader: Reader, length: i32): Description {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Description();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.moniker = reader.string();
          break;

        case 2:
          message.identity = reader.string();
          break;

        case 3:
          message.website = reader.string();
          break;

        case 4:
          message.securityContact = reader.string();
          break;

        case 5:
          message.details = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  moniker: string;
  identity: string;
  website: string;
  securityContact: string;
  details: string;

  constructor(
    moniker: string = "",
    identity: string = "",
    website: string = "",
    securityContact: string = "",
    details: string = ""
  ) {
    this.moniker = moniker;
    this.identity = identity;
    this.website = website;
    this.securityContact = securityContact;
    this.details = details;
  }
}

export function encodeDescription(message: Description): Uint8Array {
  return Protobuf.encode(message, Description.encode);
}

export function decodeDescription(buffer: Uint8Array): Description {
  return Protobuf.decode<Description>(buffer, Description.decode);
}
