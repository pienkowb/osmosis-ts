// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Delegation } from "./Delegation";
import { Coin } from "../../base/v1beta1/Coin";

export class DelegationResponse {
  static encode(message: DelegationResponse, writer: Writer): void {
    const delegation = message.delegation;
    if (delegation !== null) {
      writer.uint32(10);
      writer.fork();
      Delegation.encode(delegation, writer);
      writer.ldelim();
    }

    const balance = message.balance;
    if (balance !== null) {
      writer.uint32(18);
      writer.fork();
      Coin.encode(balance, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): DelegationResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new DelegationResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.delegation = Delegation.decode(reader, reader.uint32());
          break;

        case 2:
          message.balance = Coin.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  delegation: Delegation | null;
  balance: Coin | null;

  constructor(
    delegation: Delegation | null = null,
    balance: Coin | null = null
  ) {
    this.delegation = delegation;
    this.balance = balance;
  }
}

export function encodeDelegationResponse(
  message: DelegationResponse
): Uint8Array {
  return Protobuf.encode(message, DelegationResponse.encode);
}

export function decodeDelegationResponse(
  buffer: Uint8Array
): DelegationResponse {
  return Protobuf.decode<DelegationResponse>(buffer, DelegationResponse.decode);
}
