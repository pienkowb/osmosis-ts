// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Description } from "./Description";

export class MsgEditValidator {
  static encode(message: MsgEditValidator, writer: Writer): void {
    const description = message.description;
    if (description !== null) {
      writer.uint32(10);
      writer.fork();
      Description.encode(description, writer);
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.validatorAddress);

    writer.uint32(26);
    writer.string(message.commissionRate);

    writer.uint32(34);
    writer.string(message.minSelfDelegation);
  }

  static decode(reader: Reader, length: i32): MsgEditValidator {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgEditValidator();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.description = Description.decode(reader, reader.uint32());
          break;

        case 2:
          message.validatorAddress = reader.string();
          break;

        case 3:
          message.commissionRate = reader.string();
          break;

        case 4:
          message.minSelfDelegation = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  description: Description | null;
  validatorAddress: string;
  commissionRate: string;
  minSelfDelegation: string;

  constructor(
    description: Description | null = null,
    validatorAddress: string = "",
    commissionRate: string = "",
    minSelfDelegation: string = ""
  ) {
    this.description = description;
    this.validatorAddress = validatorAddress;
    this.commissionRate = commissionRate;
    this.minSelfDelegation = minSelfDelegation;
  }
}

export function encodeMsgEditValidator(message: MsgEditValidator): Uint8Array {
  return Protobuf.encode(message, MsgEditValidator.encode);
}

export function decodeMsgEditValidator(buffer: Uint8Array): MsgEditValidator {
  return Protobuf.decode<MsgEditValidator>(buffer, MsgEditValidator.decode);
}
