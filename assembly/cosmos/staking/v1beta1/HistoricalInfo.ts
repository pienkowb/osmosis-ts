// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Header } from "../../../tendermint/types/Header";
import { Validator } from "./Validator";

export class HistoricalInfo {
  static encode(message: HistoricalInfo, writer: Writer): void {
    const header = message.header;
    if (header !== null) {
      writer.uint32(10);
      writer.fork();
      Header.encode(header, writer);
      writer.ldelim();
    }

    const valset = message.valset;
    for (let i: i32 = 0; i < valset.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Validator.encode(valset[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): HistoricalInfo {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new HistoricalInfo();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.header = Header.decode(reader, reader.uint32());
          break;

        case 2:
          message.valset.push(Validator.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  header: Header | null;
  valset: Array<Validator>;

  constructor(header: Header | null = null, valset: Array<Validator> = []) {
    this.header = header;
    this.valset = valset;
  }
}

export function encodeHistoricalInfo(message: HistoricalInfo): Uint8Array {
  return Protobuf.encode(message, HistoricalInfo.encode);
}

export function decodeHistoricalInfo(buffer: Uint8Array): HistoricalInfo {
  return Protobuf.decode<HistoricalInfo>(buffer, HistoricalInfo.decode);
}
