// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { RedelegationEntry } from "./RedelegationEntry";

export class RedelegationEntryResponse {
  static encode(message: RedelegationEntryResponse, writer: Writer): void {
    const redelegationEntry = message.redelegationEntry;
    if (redelegationEntry !== null) {
      writer.uint32(10);
      writer.fork();
      RedelegationEntry.encode(redelegationEntry, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.balance);
  }

  static decode(reader: Reader, length: i32): RedelegationEntryResponse {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new RedelegationEntryResponse();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.redelegationEntry = RedelegationEntry.decode(
            reader,
            reader.uint32()
          );
          break;

        case 4:
          message.balance = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  redelegationEntry: RedelegationEntry | null;
  balance: string;

  constructor(
    redelegationEntry: RedelegationEntry | null = null,
    balance: string = ""
  ) {
    this.redelegationEntry = redelegationEntry;
    this.balance = balance;
  }
}

export function encodeRedelegationEntryResponse(
  message: RedelegationEntryResponse
): Uint8Array {
  return Protobuf.encode(message, RedelegationEntryResponse.encode);
}

export function decodeRedelegationEntryResponse(
  buffer: Uint8Array
): RedelegationEntryResponse {
  return Protobuf.decode<RedelegationEntryResponse>(
    buffer,
    RedelegationEntryResponse.decode
  );
}
