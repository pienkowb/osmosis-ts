// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { ConsensusStateWithHeight } from "./ConsensusStateWithHeight";

export class ClientConsensusStates {
  static encode(message: ClientConsensusStates, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const consensusStates = message.consensusStates;
    for (let i: i32 = 0; i < consensusStates.length; ++i) {
      writer.uint32(18);
      writer.fork();
      ConsensusStateWithHeight.encode(consensusStates[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ClientConsensusStates {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ClientConsensusStates();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.consensusStates.push(
            ConsensusStateWithHeight.decode(reader, reader.uint32())
          );
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  consensusStates: Array<ConsensusStateWithHeight>;

  constructor(
    clientId: string = "",
    consensusStates: Array<ConsensusStateWithHeight> = []
  ) {
    this.clientId = clientId;
    this.consensusStates = consensusStates;
  }
}

export function encodeClientConsensusStates(
  message: ClientConsensusStates
): Uint8Array {
  return Protobuf.encode(message, ClientConsensusStates.encode);
}

export function decodeClientConsensusStates(
  buffer: Uint8Array
): ClientConsensusStates {
  return Protobuf.decode<ClientConsensusStates>(
    buffer,
    ClientConsensusStates.decode
  );
}
