// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Height } from "./Height";
import { Any } from "../../../../google/protobuf/Any";

export class ConsensusStateWithHeight {
  static encode(message: ConsensusStateWithHeight, writer: Writer): void {
    const height = message.height;
    if (height !== null) {
      writer.uint32(10);
      writer.fork();
      Height.encode(height, writer);
      writer.ldelim();
    }

    const consensusState = message.consensusState;
    if (consensusState !== null) {
      writer.uint32(18);
      writer.fork();
      Any.encode(consensusState, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): ConsensusStateWithHeight {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ConsensusStateWithHeight();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.height = Height.decode(reader, reader.uint32());
          break;

        case 2:
          message.consensusState = Any.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  height: Height | null;
  consensusState: Any | null;

  constructor(height: Height | null = null, consensusState: Any | null = null) {
    this.height = height;
    this.consensusState = consensusState;
  }
}

export function encodeConsensusStateWithHeight(
  message: ConsensusStateWithHeight
): Uint8Array {
  return Protobuf.encode(message, ConsensusStateWithHeight.encode);
}

export function decodeConsensusStateWithHeight(
  buffer: Uint8Array
): ConsensusStateWithHeight {
  return Protobuf.decode<ConsensusStateWithHeight>(
    buffer,
    ConsensusStateWithHeight.decode
  );
}
