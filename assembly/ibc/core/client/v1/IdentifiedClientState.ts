// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Any } from "../../../../google/protobuf/Any";

export class IdentifiedClientState {
  static encode(message: IdentifiedClientState, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const clientState = message.clientState;
    if (clientState !== null) {
      writer.uint32(18);
      writer.fork();
      Any.encode(clientState, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): IdentifiedClientState {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new IdentifiedClientState();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.clientState = Any.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  clientState: Any | null;

  constructor(clientId: string = "", clientState: Any | null = null) {
    this.clientId = clientId;
    this.clientState = clientState;
  }
}

export function encodeIdentifiedClientState(
  message: IdentifiedClientState
): Uint8Array {
  return Protobuf.encode(message, IdentifiedClientState.encode);
}

export function decodeIdentifiedClientState(
  buffer: Uint8Array
): IdentifiedClientState {
  return Protobuf.decode<IdentifiedClientState>(
    buffer,
    IdentifiedClientState.decode
  );
}
