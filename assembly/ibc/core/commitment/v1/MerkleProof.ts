// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { CommitmentProof } from "../../../../ics23/CommitmentProof";

export class MerkleProof {
  static encode(message: MerkleProof, writer: Writer): void {
    const proofs = message.proofs;
    for (let i: i32 = 0; i < proofs.length; ++i) {
      writer.uint32(10);
      writer.fork();
      CommitmentProof.encode(proofs[i], writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): MerkleProof {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MerkleProof();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.proofs.push(CommitmentProof.decode(reader, reader.uint32()));
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  proofs: Array<CommitmentProof>;

  constructor(proofs: Array<CommitmentProof> = []) {
    this.proofs = proofs;
  }
}

export function encodeMerkleProof(message: MerkleProof): Uint8Array {
  return Protobuf.encode(message, MerkleProof.encode);
}

export function decodeMerkleProof(buffer: Uint8Array): MerkleProof {
  return Protobuf.decode<MerkleProof>(buffer, MerkleProof.decode);
}
