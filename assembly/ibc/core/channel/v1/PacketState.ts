// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class PacketState {
  static encode(message: PacketState, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.portId);

    writer.uint32(18);
    writer.string(message.channelId);

    writer.uint32(24);
    writer.uint64(message.sequence);

    writer.uint32(34);
    writer.bytes(message.data);
  }

  static decode(reader: Reader, length: i32): PacketState {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new PacketState();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.portId = reader.string();
          break;

        case 2:
          message.channelId = reader.string();
          break;

        case 3:
          message.sequence = reader.uint64();
          break;

        case 4:
          message.data = reader.bytes();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  portId: string;
  channelId: string;
  sequence: u64;
  data: Uint8Array;

  constructor(
    portId: string = "",
    channelId: string = "",
    sequence: u64 = 0,
    data: Uint8Array = new Uint8Array(0)
  ) {
    this.portId = portId;
    this.channelId = channelId;
    this.sequence = sequence;
    this.data = data;
  }
}

export function encodePacketState(message: PacketState): Uint8Array {
  return Protobuf.encode(message, PacketState.encode);
}

export function decodePacketState(buffer: Uint8Array): PacketState {
  return Protobuf.decode<PacketState>(buffer, PacketState.decode);
}
