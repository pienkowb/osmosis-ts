// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Channel } from "./Channel";

export class MsgChannelOpenInit {
  static encode(message: MsgChannelOpenInit, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.portId);

    const channel = message.channel;
    if (channel !== null) {
      writer.uint32(18);
      writer.fork();
      Channel.encode(channel, writer);
      writer.ldelim();
    }

    writer.uint32(26);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgChannelOpenInit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgChannelOpenInit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.portId = reader.string();
          break;

        case 2:
          message.channel = Channel.decode(reader, reader.uint32());
          break;

        case 3:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  portId: string;
  channel: Channel | null;
  signer: string;

  constructor(
    portId: string = "",
    channel: Channel | null = null,
    signer: string = ""
  ) {
    this.portId = portId;
    this.channel = channel;
    this.signer = signer;
  }
}

export function encodeMsgChannelOpenInit(
  message: MsgChannelOpenInit
): Uint8Array {
  return Protobuf.encode(message, MsgChannelOpenInit.encode);
}

export function decodeMsgChannelOpenInit(
  buffer: Uint8Array
): MsgChannelOpenInit {
  return Protobuf.decode<MsgChannelOpenInit>(buffer, MsgChannelOpenInit.decode);
}
