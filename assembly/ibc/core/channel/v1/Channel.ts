// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Counterparty } from "./Counterparty";
import { State } from "./State";
import { Order } from "./Order";

export class Channel {
  static encode(message: Channel, writer: Writer): void {
    writer.uint32(8);
    writer.int32(message.state);

    writer.uint32(16);
    writer.int32(message.ordering);

    const counterparty = message.counterparty;
    if (counterparty !== null) {
      writer.uint32(26);
      writer.fork();
      Counterparty.encode(counterparty, writer);
      writer.ldelim();
    }

    const connectionHops = message.connectionHops;
    if (connectionHops.length !== 0) {
      for (let i: i32 = 0; i < connectionHops.length; ++i) {
        writer.uint32(34);
        writer.string(connectionHops[i]);
      }
    }

    writer.uint32(42);
    writer.string(message.version);
  }

  static decode(reader: Reader, length: i32): Channel {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Channel();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.state = reader.int32();
          break;

        case 2:
          message.ordering = reader.int32();
          break;

        case 3:
          message.counterparty = Counterparty.decode(reader, reader.uint32());
          break;

        case 4:
          message.connectionHops.push(reader.string());
          break;

        case 5:
          message.version = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  state: State;
  ordering: Order;
  counterparty: Counterparty | null;
  connectionHops: Array<string>;
  version: string;

  constructor(
    state: State = 0,
    ordering: Order = 0,
    counterparty: Counterparty | null = null,
    connectionHops: Array<string> = [],
    version: string = ""
  ) {
    this.state = state;
    this.ordering = ordering;
    this.counterparty = counterparty;
    this.connectionHops = connectionHops;
    this.version = version;
  }
}

export function encodeChannel(message: Channel): Uint8Array {
  return Protobuf.encode(message, Channel.encode);
}

export function decodeChannel(buffer: Uint8Array): Channel {
  return Protobuf.decode<Channel>(buffer, Channel.decode);
}
