// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class Acknowledgement {
  static encode(message: Acknowledgement, writer: Writer): void {
    writer.uint32(170);
    writer.bytes(message.result);

    writer.uint32(178);
    writer.string(message.error);
  }

  static decode(reader: Reader, length: i32): Acknowledgement {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Acknowledgement();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 21:
          message.result = reader.bytes();
          break;

        case 22:
          message.error = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  result: Uint8Array;
  error: string;

  constructor(result: Uint8Array = new Uint8Array(0), error: string = "") {
    this.result = result;
    this.error = error;
  }
}

export function encodeAcknowledgement(message: Acknowledgement): Uint8Array {
  return Protobuf.encode(message, Acknowledgement.encode);
}

export function decodeAcknowledgement(buffer: Uint8Array): Acknowledgement {
  return Protobuf.decode<Acknowledgement>(buffer, Acknowledgement.decode);
}
