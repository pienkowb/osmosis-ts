// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Any } from "../../../../google/protobuf/Any";
import { Counterparty } from "./Counterparty";
import { Version } from "./Version";
import { Height } from "../../client/v1/Height";

export class MsgConnectionOpenTry {
  static encode(message: MsgConnectionOpenTry, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    writer.uint32(18);
    writer.string(message.previousConnectionId);

    const clientState = message.clientState;
    if (clientState !== null) {
      writer.uint32(26);
      writer.fork();
      Any.encode(clientState, writer);
      writer.ldelim();
    }

    const counterparty = message.counterparty;
    if (counterparty !== null) {
      writer.uint32(34);
      writer.fork();
      Counterparty.encode(counterparty, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.uint64(message.delayPeriod);

    const counterpartyVersions = message.counterpartyVersions;
    for (let i: i32 = 0; i < counterpartyVersions.length; ++i) {
      writer.uint32(50);
      writer.fork();
      Version.encode(counterpartyVersions[i], writer);
      writer.ldelim();
    }

    const proofHeight = message.proofHeight;
    if (proofHeight !== null) {
      writer.uint32(58);
      writer.fork();
      Height.encode(proofHeight, writer);
      writer.ldelim();
    }

    writer.uint32(66);
    writer.bytes(message.proofInit);

    writer.uint32(74);
    writer.bytes(message.proofClient);

    writer.uint32(82);
    writer.bytes(message.proofConsensus);

    const consensusHeight = message.consensusHeight;
    if (consensusHeight !== null) {
      writer.uint32(90);
      writer.fork();
      Height.encode(consensusHeight, writer);
      writer.ldelim();
    }

    writer.uint32(98);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenTry {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenTry();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.previousConnectionId = reader.string();
          break;

        case 3:
          message.clientState = Any.decode(reader, reader.uint32());
          break;

        case 4:
          message.counterparty = Counterparty.decode(reader, reader.uint32());
          break;

        case 5:
          message.delayPeriod = reader.uint64();
          break;

        case 6:
          message.counterpartyVersions.push(
            Version.decode(reader, reader.uint32())
          );
          break;

        case 7:
          message.proofHeight = Height.decode(reader, reader.uint32());
          break;

        case 8:
          message.proofInit = reader.bytes();
          break;

        case 9:
          message.proofClient = reader.bytes();
          break;

        case 10:
          message.proofConsensus = reader.bytes();
          break;

        case 11:
          message.consensusHeight = Height.decode(reader, reader.uint32());
          break;

        case 12:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  previousConnectionId: string;
  clientState: Any | null;
  counterparty: Counterparty | null;
  delayPeriod: u64;
  counterpartyVersions: Array<Version>;
  proofHeight: Height | null;
  proofInit: Uint8Array;
  proofClient: Uint8Array;
  proofConsensus: Uint8Array;
  consensusHeight: Height | null;
  signer: string;

  constructor(
    clientId: string = "",
    previousConnectionId: string = "",
    clientState: Any | null = null,
    counterparty: Counterparty | null = null,
    delayPeriod: u64 = 0,
    counterpartyVersions: Array<Version> = [],
    proofHeight: Height | null = null,
    proofInit: Uint8Array = new Uint8Array(0),
    proofClient: Uint8Array = new Uint8Array(0),
    proofConsensus: Uint8Array = new Uint8Array(0),
    consensusHeight: Height | null = null,
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.previousConnectionId = previousConnectionId;
    this.clientState = clientState;
    this.counterparty = counterparty;
    this.delayPeriod = delayPeriod;
    this.counterpartyVersions = counterpartyVersions;
    this.proofHeight = proofHeight;
    this.proofInit = proofInit;
    this.proofClient = proofClient;
    this.proofConsensus = proofConsensus;
    this.consensusHeight = consensusHeight;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenTry(
  message: MsgConnectionOpenTry
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenTry.encode);
}

export function decodeMsgConnectionOpenTry(
  buffer: Uint8Array
): MsgConnectionOpenTry {
  return Protobuf.decode<MsgConnectionOpenTry>(
    buffer,
    MsgConnectionOpenTry.decode
  );
}
