// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Version } from "./Version";
import { Counterparty } from "./Counterparty";
import { State } from "./State";

export class ConnectionEnd {
  static encode(message: ConnectionEnd, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const versions = message.versions;
    for (let i: i32 = 0; i < versions.length; ++i) {
      writer.uint32(18);
      writer.fork();
      Version.encode(versions[i], writer);
      writer.ldelim();
    }

    writer.uint32(24);
    writer.int32(message.state);

    const counterparty = message.counterparty;
    if (counterparty !== null) {
      writer.uint32(34);
      writer.fork();
      Counterparty.encode(counterparty, writer);
      writer.ldelim();
    }

    writer.uint32(40);
    writer.uint64(message.delayPeriod);
  }

  static decode(reader: Reader, length: i32): ConnectionEnd {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new ConnectionEnd();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.versions.push(Version.decode(reader, reader.uint32()));
          break;

        case 3:
          message.state = reader.int32();
          break;

        case 4:
          message.counterparty = Counterparty.decode(reader, reader.uint32());
          break;

        case 5:
          message.delayPeriod = reader.uint64();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  versions: Array<Version>;
  state: State;
  counterparty: Counterparty | null;
  delayPeriod: u64;

  constructor(
    clientId: string = "",
    versions: Array<Version> = [],
    state: State = 0,
    counterparty: Counterparty | null = null,
    delayPeriod: u64 = 0
  ) {
    this.clientId = clientId;
    this.versions = versions;
    this.state = state;
    this.counterparty = counterparty;
    this.delayPeriod = delayPeriod;
  }
}

export function encodeConnectionEnd(message: ConnectionEnd): Uint8Array {
  return Protobuf.encode(message, ConnectionEnd.encode);
}

export function decodeConnectionEnd(buffer: Uint8Array): ConnectionEnd {
  return Protobuf.decode<ConnectionEnd>(buffer, ConnectionEnd.decode);
}
