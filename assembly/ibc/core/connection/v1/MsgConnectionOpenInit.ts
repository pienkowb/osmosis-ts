// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Counterparty } from "./Counterparty";
import { Version } from "./Version";

export class MsgConnectionOpenInit {
  static encode(message: MsgConnectionOpenInit, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    const counterparty = message.counterparty;
    if (counterparty !== null) {
      writer.uint32(18);
      writer.fork();
      Counterparty.encode(counterparty, writer);
      writer.ldelim();
    }

    const version = message.version;
    if (version !== null) {
      writer.uint32(26);
      writer.fork();
      Version.encode(version, writer);
      writer.ldelim();
    }

    writer.uint32(32);
    writer.uint64(message.delayPeriod);

    writer.uint32(42);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenInit {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenInit();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.counterparty = Counterparty.decode(reader, reader.uint32());
          break;

        case 3:
          message.version = Version.decode(reader, reader.uint32());
          break;

        case 4:
          message.delayPeriod = reader.uint64();
          break;

        case 5:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  counterparty: Counterparty | null;
  version: Version | null;
  delayPeriod: u64;
  signer: string;

  constructor(
    clientId: string = "",
    counterparty: Counterparty | null = null,
    version: Version | null = null,
    delayPeriod: u64 = 0,
    signer: string = ""
  ) {
    this.clientId = clientId;
    this.counterparty = counterparty;
    this.version = version;
    this.delayPeriod = delayPeriod;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenInit(
  message: MsgConnectionOpenInit
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenInit.encode);
}

export function decodeMsgConnectionOpenInit(
  buffer: Uint8Array
): MsgConnectionOpenInit {
  return Protobuf.decode<MsgConnectionOpenInit>(
    buffer,
    MsgConnectionOpenInit.decode
  );
}
