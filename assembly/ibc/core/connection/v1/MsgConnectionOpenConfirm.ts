// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { Height } from "../../client/v1/Height";

export class MsgConnectionOpenConfirm {
  static encode(message: MsgConnectionOpenConfirm, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.connectionId);

    writer.uint32(18);
    writer.bytes(message.proofAck);

    const proofHeight = message.proofHeight;
    if (proofHeight !== null) {
      writer.uint32(26);
      writer.fork();
      Height.encode(proofHeight, writer);
      writer.ldelim();
    }

    writer.uint32(34);
    writer.string(message.signer);
  }

  static decode(reader: Reader, length: i32): MsgConnectionOpenConfirm {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new MsgConnectionOpenConfirm();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.connectionId = reader.string();
          break;

        case 2:
          message.proofAck = reader.bytes();
          break;

        case 3:
          message.proofHeight = Height.decode(reader, reader.uint32());
          break;

        case 4:
          message.signer = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  connectionId: string;
  proofAck: Uint8Array;
  proofHeight: Height | null;
  signer: string;

  constructor(
    connectionId: string = "",
    proofAck: Uint8Array = new Uint8Array(0),
    proofHeight: Height | null = null,
    signer: string = ""
  ) {
    this.connectionId = connectionId;
    this.proofAck = proofAck;
    this.proofHeight = proofHeight;
    this.signer = signer;
  }
}

export function encodeMsgConnectionOpenConfirm(
  message: MsgConnectionOpenConfirm
): Uint8Array {
  return Protobuf.encode(message, MsgConnectionOpenConfirm.encode);
}

export function decodeMsgConnectionOpenConfirm(
  buffer: Uint8Array
): MsgConnectionOpenConfirm {
  return Protobuf.decode<MsgConnectionOpenConfirm>(
    buffer,
    MsgConnectionOpenConfirm.decode
  );
}
