// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";
import { MerklePrefix } from "../../commitment/v1/MerklePrefix";

export class Counterparty {
  static encode(message: Counterparty, writer: Writer): void {
    writer.uint32(10);
    writer.string(message.clientId);

    writer.uint32(18);
    writer.string(message.connectionId);

    const prefix = message.prefix;
    if (prefix !== null) {
      writer.uint32(26);
      writer.fork();
      MerklePrefix.encode(prefix, writer);
      writer.ldelim();
    }
  }

  static decode(reader: Reader, length: i32): Counterparty {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Counterparty();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          message.clientId = reader.string();
          break;

        case 2:
          message.connectionId = reader.string();
          break;

        case 3:
          message.prefix = MerklePrefix.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  clientId: string;
  connectionId: string;
  prefix: MerklePrefix | null;

  constructor(
    clientId: string = "",
    connectionId: string = "",
    prefix: MerklePrefix | null = null
  ) {
    this.clientId = clientId;
    this.connectionId = connectionId;
    this.prefix = prefix;
  }
}

export function encodeCounterparty(message: Counterparty): Uint8Array {
  return Protobuf.encode(message, Counterparty.encode);
}

export function decodeCounterparty(buffer: Uint8Array): Counterparty {
  return Protobuf.decode<Counterparty>(buffer, Counterparty.decode);
}
