// Code generated by protoc-gen-as. DO NOT EDIT.
// Versions:
//   protoc-gen-as v1.2.0
//   protoc        v3.21.12

import { Writer, Reader, Protobuf } from "as-proto/assembly";

export class Annotation {
  static encode(message: Annotation, writer: Writer): void {
    const path = message.path;
    if (path.length !== 0) {
      writer.uint32(10);
      writer.fork();
      for (let i: i32 = 0; i < path.length; ++i) {
        writer.int32(path[i]);
      }
      writer.ldelim();
    }

    writer.uint32(18);
    writer.string(message.sourceFile);

    writer.uint32(24);
    writer.int32(message.begin);

    writer.uint32(32);
    writer.int32(message.end);
  }

  static decode(reader: Reader, length: i32): Annotation {
    const end: usize = length < 0 ? reader.end : reader.ptr + length;
    const message = new Annotation();

    while (reader.ptr < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          for (
            const end: usize = reader.ptr + reader.uint32();
            reader.ptr < end;

          ) {
            message.path.push(reader.int32());
          }
          break;

        case 2:
          message.sourceFile = reader.string();
          break;

        case 3:
          message.begin = reader.int32();
          break;

        case 4:
          message.end = reader.int32();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  }

  path: Array<i32>;
  sourceFile: string;
  begin: i32;
  end: i32;

  constructor(
    path: Array<i32> = [],
    sourceFile: string = "",
    begin: i32 = 0,
    end: i32 = 0
  ) {
    this.path = path;
    this.sourceFile = sourceFile;
    this.begin = begin;
    this.end = end;
  }
}

export function encodeAnnotation(message: Annotation): Uint8Array {
  return Protobuf.encode(message, Annotation.encode);
}

export function decodeAnnotation(buffer: Uint8Array): Annotation {
  return Protobuf.decode<Annotation>(buffer, Annotation.decode);
}
